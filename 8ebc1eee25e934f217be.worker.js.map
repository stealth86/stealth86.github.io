{"version":3,"sources":["../8ebc1eee25e934f217be.worker.js","../webpack/bootstrap 8ebc1eee25e934f217be","../node_modules/buffer/index.js","workers/Resize.worker.js","utils/ResizeImageData.js","../node_modules/webpack/buildin/global.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/isarray/index.js","../node_modules/jpeg-js/index.js","../node_modules/jpeg-js/lib/encoder.js","../node_modules/jpeg-js/lib/decoder.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","global","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","length","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","this","Error","allocUnsafe","from","value","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","byteLength","actual","write","slice","fromArrayLike","array","byteOffset","obj","isBuffer","len","copy","buffer","isnan","type","isArray","data","toString","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","b","bidirectionalIndexOf","val","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","read","buf","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","charCodeAt","byteArray","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","foo","subarray","e","poolSize","_augment","Symbol","species","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","equals","inspect","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","_this","resizeImage","jpegjs","onmessage","event","width","height","quality","filesToUpload","files","image","file","infile","reader","FileReader","onload","rawImageData","decode","result","resizedRawImageData","resizedImage","encode","blobImage","Blob","postMessage","filename","readAsArrayBuffer","Uint8ToString","nearestNeighbor","srcX","srcY","srcPos","bilinearInterpolation","interpolate","k","kMin","kMax","vMin","vMax","round","interpolateHorizontal","xMin","xMax","interpolateVertical","yMin","yMax","ceil","algorithm","resize","g","Function","eval","window","getLens","b64","validLen","lens","placeHoldersLen","_byteLength","tmp","Arr","curByte","revLookup","tripletToBase64","num","lookup","encodeChunk","uint8","output","extraBytes","parts","len2","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","JPEGEncoder","initQuantTables","sf","YQT","t","ffloor","YTable","ZigZag","UVQT","u","UVTable","aasf","row","col","fdtbl_Y","fdtbl_UV","computeHuffmanTbl","nrcodes","std_table","codevalue","pos_in_table","HT","initHuffmanTbl","YDC_HT","std_dc_luminance_nrcodes","std_dc_luminance_values","UVDC_HT","std_dc_chrominance_nrcodes","std_dc_chrominance_values","YAC_HT","std_ac_luminance_nrcodes","std_ac_luminance_values","UVAC_HT","std_ac_chrominance_nrcodes","std_ac_chrominance_values","initCategoryNumber","nrlower","nrupper","cat","nr","category","bitcode","nrneg","initRGBYUVTable","RGB_YUV_TABLE","writeBits","bs","posval","bytenew","bytepos","writeByte","byteout","writeWord","fDCTQuant","fdtbl","d0","d1","d2","d3","d4","d5","d6","d7","dataOff","tmp0","tmp7","tmp1","tmp6","tmp2","tmp5","tmp3","tmp4","tmp10","tmp13","tmp11","tmp12","z1","z5","z2","z4","z3","z11","z13","tmp0p2","tmp7p2","tmp1p2","tmp6p2","tmp2p2","tmp5p2","tmp3p2","tmp4p2","tmp10p2","tmp13p2","tmp11p2","tmp12p2","z1p2","z5p2","z2p2","z4p2","z3p2","z11p2","z13p2","outputfDCTQuant","writeAPP0","writeSOF0","writeDQT","writeDHT","writeSOS","processDU","CDU","DC","HTDC","HTAC","EOB","M16zeroes","DU_DCT","DU","Diff","end0pos","lng","startpos","nrzeroes","nrmarker","initCharLookupTable","sfcc","clt","setQuality","currentQuality","YDU","UDU","VDU","Date","getTime","DCY","DCU","DCV","displayName","r","imageData","quadWidth","fillbits","imgData","qu","jpegData","useTArray","decoder","JpegImage","parse","copyToImageData","constructor","buildHuffmanTable","codeLengths","values","children","index","q","pop","decodeScan","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","readBit","bitsCount","bitsData","nextByte","decodeHuffman","tree","bit","node","receive","receiveAndExtend","decodeBaseline","component","zz","huffmanTableDC","diff","pred","rs","huffmanTableAC","dctZigZag","decodeDCFirst","decodeDCSuccessive","decodeACFirst","eobrun","decodeACSuccessive","z","direction","successiveACState","successiveACNextValue","decodeFn","mcusPerLine","precision","samplesPerLine","scanLines","progressive","startOffset","maxH","maxV","componentsLength","marker","mcuExpected","mcu","blocksPerLine","blocksPerColumn","mcusPerColumn","h","v","blockRow","blockCol","blocks","mcuRow","mcuCol","buildComponentData","lines","R","Int32Array","scanLine","dataOut","dataIn","v0","v1","v2","v3","v4","v5","v6","v7","qt","quantizationTable","dctSqrt2","dctSqrt1d2","dctSin6","dctCos6","dctSin3","dctCos3","dctSin1","dctCos1","sample","line","clampTo8bit","load","path","xhr","XMLHttpRequest","open","responseType","response","mozResponseArrayBuffer","bind","send","readUint16","jfif","adobe","quantizationTables","frames","huffmanTablesAC","huffmanTablesDC","fileMarker","appData","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","extended","componentsOrder","componentId","componentsCount","qId","quantizationIdx","blocksPerLineForMcu","blocksPerColumnForMcu","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","tableSpec","successiveApproximation","processed","cp","scaleX","scaleY","getData","component1","component2","component3","component4","component1Line","component2Line","component3Line","component4Line","Y","Cb","Cr","K","C","M","Ye","G","B","colorTransform","dataLength","imageDataArray"],"mappings":"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","file":"8ebc1eee25e934f217be.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(4)\nvar ieee754 = __webpack_require__(5)\nvar isArray = __webpack_require__(6)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _this=this;var resizeImage=__webpack_require__(2);var jpegjs=__webpack_require__(7);onmessage=function onmessage(event){_this.width=event.data.width;_this.height=event.data.height;_this.quality=event.data.quality;_this.filesToUpload=event.data.files;_this.image=event.data.image;//console.log(this.filesToUpload);\nfor(var i=0;i<_this.filesToUpload.length;i++){var file=_this.filesToUpload[i];(function(infile){var reader=new FileReader();reader.onload=function(e){//console.log(e.target.result);\nvar rawImageData=jpegjs.decode(e.target.result);//console.log(rawImageData);\nvar resizedRawImageData=resizeImage(rawImageData,_this.width,_this.height);//console.log(resizedRawImageData);\nvar resizedImage=jpegjs.encode({data:resizedRawImageData.data,width:_this.width,height:_this.height},_this.quality);//console.log(resizedImage);\n//var b64encoded = btoa(Uint8ToString(resizedImage.data));\nvar blobImage=new Blob([resizedImage.data],{type:\"Image/jpeg\"});postMessage({image:blobImage,filename:infile.name});};reader.readAsArrayBuffer(infile);})(file);}};Uint8ToString=function Uint8ToString(byteArray){var CHUNK_SZ=0x8000;var result=[];for(var i=0;i<byteArray.length;i+=CHUNK_SZ){result.push(String.fromCharCode.apply(null,byteArray.subarray(i,i+CHUNK_SZ)));}return result.join(\"\");};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Buffer) {function nearestNeighbor(src,dst){var pos=0;for(var y=0;y<dst.height;y++){for(var x=0;x<dst.width;x++){var srcX=Math.floor(x*src.width/dst.width);var srcY=Math.floor(y*src.height/dst.height);var srcPos=(srcY*src.width+srcX)*4;dst.data[pos++]=src.data[srcPos++];// R\ndst.data[pos++]=src.data[srcPos++];// G\ndst.data[pos++]=src.data[srcPos++];// B\ndst.data[pos++]=src.data[srcPos++];// A\n}}}function bilinearInterpolation(src,dst){function interpolate(k,kMin,kMax,vMin,vMax){return Math.round((k-kMin)*vMax+(kMax-k)*vMin);}function interpolateHorizontal(offset,x,y,xMin,xMax){var vMin=src.data[(y*src.width+xMin)*4+offset];if(xMin===xMax)return vMin;var vMax=src.data[(y*src.width+xMax)*4+offset];return interpolate(x,xMin,xMax,vMin,vMax);}function interpolateVertical(offset,x,xMin,xMax,y,yMin,yMax){var vMin=interpolateHorizontal(offset,x,yMin,xMin,xMax);if(yMin===yMax)return vMin;var vMax=interpolateHorizontal(offset,x,yMax,xMin,xMax);return interpolate(y,yMin,yMax,vMin,vMax);}var pos=0;for(var y=0;y<dst.height;y++){for(var x=0;x<dst.width;x++){var srcX=x*src.width/dst.width;var srcY=y*src.height/dst.height;var xMin=Math.floor(srcX);var yMin=Math.floor(srcY);var xMax=Math.min(Math.ceil(srcX),src.width-1);var yMax=Math.min(Math.ceil(srcY),src.height-1);dst.data[pos++]=interpolateVertical(0,srcX,xMin,xMax,srcY,yMin,yMax);// R\ndst.data[pos++]=interpolateVertical(1,srcX,xMin,xMax,srcY,yMin,yMax);// G\ndst.data[pos++]=interpolateVertical(2,srcX,xMin,xMax,srcY,yMin,yMax);// B\ndst.data[pos++]=interpolateVertical(3,srcX,xMin,xMax,srcY,yMin,yMax);// A\n}}}module.exports=function resizeImageData(image,width,height,algorithm){algorithm=algorithm||'biliniear-interp';var resize=void 0;switch(algorithm){case'nearest-neighbor':resize=nearestNeighbor;break;case'biliniear-interp':resize=bilinearInterpolation;break;default:throw new Error('Unknown algorithm: '+algorithm);}var data=Buffer.allocUnsafe(width*height*4);var result={width:width,height:height,data:data};resize(image,result);return result;};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar encode = __webpack_require__(8),\n    decode = __webpack_require__(9);\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {/*\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*\nJPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\n\nBasic GUI blocking jpeg encoder\n*/\n\nvar btoa = btoa || function(buf) {\n  return new Buffer(buf).toString('base64');\n};\n\nfunction JPEGEncoder(quality) {\n  var self = this;\n\tvar fround = Math.round;\n\tvar ffloor = Math.floor;\n\tvar YTable = new Array(64);\n\tvar UVTable = new Array(64);\n\tvar fdtbl_Y = new Array(64);\n\tvar fdtbl_UV = new Array(64);\n\tvar YDC_HT;\n\tvar UVDC_HT;\n\tvar YAC_HT;\n\tvar UVAC_HT;\n\t\n\tvar bitcode = new Array(65535);\n\tvar category = new Array(65535);\n\tvar outputfDCTQuant = new Array(64);\n\tvar DU = new Array(64);\n\tvar byteout = [];\n\tvar bytenew = 0;\n\tvar bytepos = 7;\n\t\n\tvar YDU = new Array(64);\n\tvar UDU = new Array(64);\n\tvar VDU = new Array(64);\n\tvar clt = new Array(256);\n\tvar RGB_YUV_TABLE = new Array(2048);\n\tvar currentQuality;\n\t\n\tvar ZigZag = [\n\t\t\t 0, 1, 5, 6,14,15,27,28,\n\t\t\t 2, 4, 7,13,16,26,29,42,\n\t\t\t 3, 8,12,17,25,30,41,43,\n\t\t\t 9,11,18,24,31,40,44,53,\n\t\t\t10,19,23,32,39,45,52,54,\n\t\t\t20,22,33,38,46,51,55,60,\n\t\t\t21,34,37,47,50,56,59,61,\n\t\t\t35,36,48,49,57,58,62,63\n\t\t];\n\t\n\tvar std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];\n\tvar std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];\n\tvar std_ac_luminance_values = [\n\t\t\t0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,\n\t\t\t0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,\n\t\t\t0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,\n\t\t\t0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,\n\t\t\t0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,\n\t\t\t0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,\n\t\t\t0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,\n\t\t\t0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,\n\t\t\t0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,\n\t\t\t0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,\n\t\t\t0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,\n\t\t\t0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,\n\t\t\t0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,\n\t\t\t0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,\n\t\t\t0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,\n\t\t\t0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,\n\t\t\t0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,\n\t\t\t0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,\n\t\t\t0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,\n\t\t\t0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tvar std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];\n\tvar std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];\n\tvar std_ac_chrominance_values = [\n\t\t\t0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,\n\t\t\t0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,\n\t\t\t0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,\n\t\t\t0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,\n\t\t\t0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,\n\t\t\t0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,\n\t\t\t0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,\n\t\t\t0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,\n\t\t\t0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,\n\t\t\t0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,\n\t\t\t0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,\n\t\t\t0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,\n\t\t\t0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,\n\t\t\t0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,\n\t\t\t0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,\n\t\t\t0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,\n\t\t\t0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,\n\t\t\t0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,\n\t\t\t0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,\n\t\t\t0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tfunction initQuantTables(sf){\n\t\t\tvar YQT = [\n\t\t\t\t16, 11, 10, 16, 24, 40, 51, 61,\n\t\t\t\t12, 12, 14, 19, 26, 58, 60, 55,\n\t\t\t\t14, 13, 16, 24, 40, 57, 69, 56,\n\t\t\t\t14, 17, 22, 29, 51, 87, 80, 62,\n\t\t\t\t18, 22, 37, 56, 68,109,103, 77,\n\t\t\t\t24, 35, 55, 64, 81,104,113, 92,\n\t\t\t\t49, 64, 78, 87,103,121,120,101,\n\t\t\t\t72, 92, 95, 98,112,100,103, 99\n\t\t\t];\n\t\t\t\n\t\t\tfor (var i = 0; i < 64; i++) {\n\t\t\t\tvar t = ffloor((YQT[i]*sf+50)/100);\n\t\t\t\tif (t < 1) {\n\t\t\t\t\tt = 1;\n\t\t\t\t} else if (t > 255) {\n\t\t\t\t\tt = 255;\n\t\t\t\t}\n\t\t\t\tYTable[ZigZag[i]] = t;\n\t\t\t}\n\t\t\tvar UVQT = [\n\t\t\t\t17, 18, 24, 47, 99, 99, 99, 99,\n\t\t\t\t18, 21, 26, 66, 99, 99, 99, 99,\n\t\t\t\t24, 26, 56, 99, 99, 99, 99, 99,\n\t\t\t\t47, 66, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99\n\t\t\t];\n\t\t\tfor (var j = 0; j < 64; j++) {\n\t\t\t\tvar u = ffloor((UVQT[j]*sf+50)/100);\n\t\t\t\tif (u < 1) {\n\t\t\t\t\tu = 1;\n\t\t\t\t} else if (u > 255) {\n\t\t\t\t\tu = 255;\n\t\t\t\t}\n\t\t\t\tUVTable[ZigZag[j]] = u;\n\t\t\t}\n\t\t\tvar aasf = [\n\t\t\t\t1.0, 1.387039845, 1.306562965, 1.175875602,\n\t\t\t\t1.0, 0.785694958, 0.541196100, 0.275899379\n\t\t\t];\n\t\t\tvar k = 0;\n\t\t\tfor (var row = 0; row < 8; row++)\n\t\t\t{\n\t\t\t\tfor (var col = 0; col < 8; col++)\n\t\t\t\t{\n\t\t\t\t\tfdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tfdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction computeHuffmanTbl(nrcodes, std_table){\n\t\t\tvar codevalue = 0;\n\t\t\tvar pos_in_table = 0;\n\t\t\tvar HT = new Array();\n\t\t\tfor (var k = 1; k <= 16; k++) {\n\t\t\t\tfor (var j = 1; j <= nrcodes[k]; j++) {\n\t\t\t\t\tHT[std_table[pos_in_table]] = [];\n\t\t\t\t\tHT[std_table[pos_in_table]][0] = codevalue;\n\t\t\t\t\tHT[std_table[pos_in_table]][1] = k;\n\t\t\t\t\tpos_in_table++;\n\t\t\t\t\tcodevalue++;\n\t\t\t\t}\n\t\t\t\tcodevalue*=2;\n\t\t\t}\n\t\t\treturn HT;\n\t\t}\n\t\t\n\t\tfunction initHuffmanTbl()\n\t\t{\n\t\t\tYDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);\n\t\t\tUVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);\n\t\t\tYAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);\n\t\t\tUVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);\n\t\t}\n\t\n\t\tfunction initCategoryNumber()\n\t\t{\n\t\t\tvar nrlower = 1;\n\t\t\tvar nrupper = 2;\n\t\t\tfor (var cat = 1; cat <= 15; cat++) {\n\t\t\t\t//Positive numbers\n\t\t\t\tfor (var nr = nrlower; nr<nrupper; nr++) {\n\t\t\t\t\tcategory[32767+nr] = cat;\n\t\t\t\t\tbitcode[32767+nr] = [];\n\t\t\t\t\tbitcode[32767+nr][1] = cat;\n\t\t\t\t\tbitcode[32767+nr][0] = nr;\n\t\t\t\t}\n\t\t\t\t//Negative numbers\n\t\t\t\tfor (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {\n\t\t\t\t\tcategory[32767+nrneg] = cat;\n\t\t\t\t\tbitcode[32767+nrneg] = [];\n\t\t\t\t\tbitcode[32767+nrneg][1] = cat;\n\t\t\t\t\tbitcode[32767+nrneg][0] = nrupper-1+nrneg;\n\t\t\t\t}\n\t\t\t\tnrlower <<= 1;\n\t\t\t\tnrupper <<= 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction initRGBYUVTable() {\n\t\t\tfor(var i = 0; i < 256;i++) {\n\t\t\t\tRGB_YUV_TABLE[i]      \t\t=  19595 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 256)>>0] \t=  38470 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 512)>>0] \t=   7471 * i + 0x8000;\n\t\t\t\tRGB_YUV_TABLE[(i+ 768)>>0] \t= -11059 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1024)>>0] \t= -21709 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1280)>>0] \t=  32768 * i + 0x807FFF;\n\t\t\t\tRGB_YUV_TABLE[(i+1536)>>0] \t= -27439 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1792)>>0] \t= - 5329 * i;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// IO functions\n\t\tfunction writeBits(bs)\n\t\t{\n\t\t\tvar value = bs[0];\n\t\t\tvar posval = bs[1]-1;\n\t\t\twhile ( posval >= 0 ) {\n\t\t\t\tif (value & (1 << posval) ) {\n\t\t\t\t\tbytenew |= (1 << bytepos);\n\t\t\t\t}\n\t\t\t\tposval--;\n\t\t\t\tbytepos--;\n\t\t\t\tif (bytepos < 0) {\n\t\t\t\t\tif (bytenew == 0xFF) {\n\t\t\t\t\t\twriteByte(0xFF);\n\t\t\t\t\t\twriteByte(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\twriteByte(bytenew);\n\t\t\t\t\t}\n\t\t\t\t\tbytepos=7;\n\t\t\t\t\tbytenew=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeByte(value)\n\t\t{\n\t\t\t//byteout.push(clt[value]); // write char directly instead of converting later\n      byteout.push(value);\n\t\t}\n\t\n\t\tfunction writeWord(value)\n\t\t{\n\t\t\twriteByte((value>>8)&0xFF);\n\t\t\twriteByte((value   )&0xFF);\n\t\t}\n\t\t\n\t\t// DCT & quantization core\n\t\tfunction fDCTQuant(data, fdtbl)\n\t\t{\n\t\t\tvar d0, d1, d2, d3, d4, d5, d6, d7;\n\t\t\t/* Pass 1: process rows. */\n\t\t\tvar dataOff=0;\n\t\t\tvar i;\n\t\t\tvar I8 = 8;\n\t\t\tvar I64 = 64;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff+1];\n\t\t\t\td2 = data[dataOff+2];\n\t\t\t\td3 = data[dataOff+3];\n\t\t\t\td4 = data[dataOff+4];\n\t\t\t\td5 = data[dataOff+5];\n\t\t\t\td6 = data[dataOff+6];\n\t\t\t\td7 = data[dataOff+7];\n\t\t\t\t\n\t\t\t\tvar tmp0 = d0 + d7;\n\t\t\t\tvar tmp7 = d0 - d7;\n\t\t\t\tvar tmp1 = d1 + d6;\n\t\t\t\tvar tmp6 = d1 - d6;\n\t\t\t\tvar tmp2 = d2 + d5;\n\t\t\t\tvar tmp5 = d2 - d5;\n\t\t\t\tvar tmp3 = d3 + d4;\n\t\t\t\tvar tmp4 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10 = tmp0 + tmp3;\t/* phase 2 */\n\t\t\t\tvar tmp13 = tmp0 - tmp3;\n\t\t\t\tvar tmp11 = tmp1 + tmp2;\n\t\t\t\tvar tmp12 = tmp1 - tmp2;\n\t\n\t\t\t\tdata[dataOff] = tmp10 + tmp11; /* phase 3 */\n\t\t\t\tdata[dataOff+4] = tmp10 - tmp11;\n\t\n\t\t\t\tvar z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+2] = tmp13 + z1; /* phase 5 */\n\t\t\t\tdata[dataOff+6] = tmp13 - z1;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10 = tmp4 + tmp5; /* phase 2 */\n\t\t\t\ttmp11 = tmp5 + tmp6;\n\t\t\t\ttmp12 = tmp6 + tmp7;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */\n\t\t\t\tvar z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */\n\t\t\t\tvar z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */\n\t\t\t\tvar z3 = tmp11 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11 = tmp7 + z3;\t/* phase 5 */\n\t\t\t\tvar z13 = tmp7 - z3;\n\t\n\t\t\t\tdata[dataOff+5] = z13 + z2;\t/* phase 6 */\n\t\t\t\tdata[dataOff+3] = z13 - z2;\n\t\t\t\tdata[dataOff+1] = z11 + z4;\n\t\t\t\tdata[dataOff+7] = z11 - z4;\n\t\n\t\t\t\tdataOff += 8; /* advance pointer to next row */\n\t\t\t}\n\t\n\t\t\t/* Pass 2: process columns. */\n\t\t\tdataOff = 0;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff + 8];\n\t\t\t\td2 = data[dataOff + 16];\n\t\t\t\td3 = data[dataOff + 24];\n\t\t\t\td4 = data[dataOff + 32];\n\t\t\t\td5 = data[dataOff + 40];\n\t\t\t\td6 = data[dataOff + 48];\n\t\t\t\td7 = data[dataOff + 56];\n\t\t\t\t\n\t\t\t\tvar tmp0p2 = d0 + d7;\n\t\t\t\tvar tmp7p2 = d0 - d7;\n\t\t\t\tvar tmp1p2 = d1 + d6;\n\t\t\t\tvar tmp6p2 = d1 - d6;\n\t\t\t\tvar tmp2p2 = d2 + d5;\n\t\t\t\tvar tmp5p2 = d2 - d5;\n\t\t\t\tvar tmp3p2 = d3 + d4;\n\t\t\t\tvar tmp4p2 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10p2 = tmp0p2 + tmp3p2;\t/* phase 2 */\n\t\t\t\tvar tmp13p2 = tmp0p2 - tmp3p2;\n\t\t\t\tvar tmp11p2 = tmp1p2 + tmp2p2;\n\t\t\t\tvar tmp12p2 = tmp1p2 - tmp2p2;\n\t\n\t\t\t\tdata[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */\n\t\t\t\tdata[dataOff+32] = tmp10p2 - tmp11p2;\n\t\n\t\t\t\tvar z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */\n\t\t\t\tdata[dataOff+48] = tmp13p2 - z1p2;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */\n\t\t\t\ttmp11p2 = tmp5p2 + tmp6p2;\n\t\t\t\ttmp12p2 = tmp6p2 + tmp7p2;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */\n\t\t\t\tvar z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */\n\t\t\t\tvar z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */\n\t\t\t\tvar z3p2 = tmp11p2 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11p2 = tmp7p2 + z3p2;\t/* phase 5 */\n\t\t\t\tvar z13p2 = tmp7p2 - z3p2;\n\t\n\t\t\t\tdata[dataOff+40] = z13p2 + z2p2; /* phase 6 */\n\t\t\t\tdata[dataOff+24] = z13p2 - z2p2;\n\t\t\t\tdata[dataOff+ 8] = z11p2 + z4p2;\n\t\t\t\tdata[dataOff+56] = z11p2 - z4p2;\n\t\n\t\t\t\tdataOff++; /* advance pointer to next column */\n\t\t\t}\n\t\n\t\t\t// Quantize/descale the coefficients\n\t\t\tvar fDCTQuant;\n\t\t\tfor (i=0; i<I64; ++i)\n\t\t\t{\n\t\t\t\t// Apply the quantization and scaling factor & Round to nearest integer\n\t\t\t\tfDCTQuant = data[i]*fdtbl[i];\n\t\t\t\toutputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);\n\t\t\t\t//outputfDCTQuant[i] = fround(fDCTQuant);\n\n\t\t\t}\n\t\t\treturn outputfDCTQuant;\n\t\t}\n\t\t\n\t\tfunction writeAPP0()\n\t\t{\n\t\t\twriteWord(0xFFE0); // marker\n\t\t\twriteWord(16); // length\n\t\t\twriteByte(0x4A); // J\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0x49); // I\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0); // = \"JFIF\",'\\0'\n\t\t\twriteByte(1); // versionhi\n\t\t\twriteByte(1); // versionlo\n\t\t\twriteByte(0); // xyunits\n\t\t\twriteWord(1); // xdensity\n\t\t\twriteWord(1); // ydensity\n\t\t\twriteByte(0); // thumbnwidth\n\t\t\twriteByte(0); // thumbnheight\n\t\t}\n\t\n\t\tfunction writeSOF0(width, height)\n\t\t{\n\t\t\twriteWord(0xFFC0); // marker\n\t\t\twriteWord(17);   // length, truecolor YUV JPG\n\t\t\twriteByte(8);    // precision\n\t\t\twriteWord(height);\n\t\t\twriteWord(width);\n\t\t\twriteByte(3);    // nrofcomponents\n\t\t\twriteByte(1);    // IdY\n\t\t\twriteByte(0x11); // HVY\n\t\t\twriteByte(0);    // QTY\n\t\t\twriteByte(2);    // IdU\n\t\t\twriteByte(0x11); // HVU\n\t\t\twriteByte(1);    // QTU\n\t\t\twriteByte(3);    // IdV\n\t\t\twriteByte(0x11); // HVV\n\t\t\twriteByte(1);    // QTV\n\t\t}\n\t\n\t\tfunction writeDQT()\n\t\t{\n\t\t\twriteWord(0xFFDB); // marker\n\t\t\twriteWord(132);\t   // length\n\t\t\twriteByte(0);\n\t\t\tfor (var i=0; i<64; i++) {\n\t\t\t\twriteByte(YTable[i]);\n\t\t\t}\n\t\t\twriteByte(1);\n\t\t\tfor (var j=0; j<64; j++) {\n\t\t\t\twriteByte(UVTable[j]);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeDHT()\n\t\t{\n\t\t\twriteWord(0xFFC4); // marker\n\t\t\twriteWord(0x01A2); // length\n\t\n\t\t\twriteByte(0); // HTYDCinfo\n\t\t\tfor (var i=0; i<16; i++) {\n\t\t\t\twriteByte(std_dc_luminance_nrcodes[i+1]);\n\t\t\t}\n\t\t\tfor (var j=0; j<=11; j++) {\n\t\t\t\twriteByte(std_dc_luminance_values[j]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x10); // HTYACinfo\n\t\t\tfor (var k=0; k<16; k++) {\n\t\t\t\twriteByte(std_ac_luminance_nrcodes[k+1]);\n\t\t\t}\n\t\t\tfor (var l=0; l<=161; l++) {\n\t\t\t\twriteByte(std_ac_luminance_values[l]);\n\t\t\t}\n\t\n\t\t\twriteByte(1); // HTUDCinfo\n\t\t\tfor (var m=0; m<16; m++) {\n\t\t\t\twriteByte(std_dc_chrominance_nrcodes[m+1]);\n\t\t\t}\n\t\t\tfor (var n=0; n<=11; n++) {\n\t\t\t\twriteByte(std_dc_chrominance_values[n]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x11); // HTUACinfo\n\t\t\tfor (var o=0; o<16; o++) {\n\t\t\t\twriteByte(std_ac_chrominance_nrcodes[o+1]);\n\t\t\t}\n\t\t\tfor (var p=0; p<=161; p++) {\n\t\t\t\twriteByte(std_ac_chrominance_values[p]);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeSOS()\n\t\t{\n\t\t\twriteWord(0xFFDA); // marker\n\t\t\twriteWord(12); // length\n\t\t\twriteByte(3); // nrofcomponents\n\t\t\twriteByte(1); // IdY\n\t\t\twriteByte(0); // HTY\n\t\t\twriteByte(2); // IdU\n\t\t\twriteByte(0x11); // HTU\n\t\t\twriteByte(3); // IdV\n\t\t\twriteByte(0x11); // HTV\n\t\t\twriteByte(0); // Ss\n\t\t\twriteByte(0x3f); // Se\n\t\t\twriteByte(0); // Bf\n\t\t}\n\t\t\n\t\tfunction processDU(CDU, fdtbl, DC, HTDC, HTAC){\n\t\t\tvar EOB = HTAC[0x00];\n\t\t\tvar M16zeroes = HTAC[0xF0];\n\t\t\tvar pos;\n\t\t\tvar I16 = 16;\n\t\t\tvar I63 = 63;\n\t\t\tvar I64 = 64;\n\t\t\tvar DU_DCT = fDCTQuant(CDU, fdtbl);\n\t\t\t//ZigZag reorder\n\t\t\tfor (var j=0;j<I64;++j) {\n\t\t\t\tDU[ZigZag[j]]=DU_DCT[j];\n\t\t\t}\n\t\t\tvar Diff = DU[0] - DC; DC = DU[0];\n\t\t\t//Encode DC\n\t\t\tif (Diff==0) {\n\t\t\t\twriteBits(HTDC[0]); // Diff might be 0\n\t\t\t} else {\n\t\t\t\tpos = 32767+Diff;\n\t\t\t\twriteBits(HTDC[category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t}\n\t\t\t//Encode ACs\n\t\t\tvar end0pos = 63; // was const... which is crazy\n\t\t\tfor (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};\n\t\t\t//end0pos = first element in reverse order !=0\n\t\t\tif ( end0pos == 0) {\n\t\t\t\twriteBits(EOB);\n\t\t\t\treturn DC;\n\t\t\t}\n\t\t\tvar i = 1;\n\t\t\tvar lng;\n\t\t\twhile ( i <= end0pos ) {\n\t\t\t\tvar startpos = i;\n\t\t\t\tfor (; (DU[i]==0) && (i<=end0pos); ++i) {}\n\t\t\t\tvar nrzeroes = i-startpos;\n\t\t\t\tif ( nrzeroes >= I16 ) {\n\t\t\t\t\tlng = nrzeroes>>4;\n\t\t\t\t\tfor (var nrmarker=1; nrmarker <= lng; ++nrmarker)\n\t\t\t\t\t\twriteBits(M16zeroes);\n\t\t\t\t\tnrzeroes = nrzeroes&0xF;\n\t\t\t\t}\n\t\t\t\tpos = 32767+DU[i];\n\t\t\t\twriteBits(HTAC[(nrzeroes<<4)+category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif ( end0pos != I63 ) {\n\t\t\t\twriteBits(EOB);\n\t\t\t}\n\t\t\treturn DC;\n\t\t}\n\n\t\tfunction initCharLookupTable(){\n\t\t\tvar sfcc = String.fromCharCode;\n\t\t\tfor(var i=0; i < 256; i++){ ///// ACHTUNG // 255\n\t\t\t\tclt[i] = sfcc(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.encode = function(image,quality) // image data object\n\t\t{\n\t\t\tvar time_start = new Date().getTime();\n\t\t\t\n\t\t\tif(quality) setQuality(quality);\n\t\t\t\n\t\t\t// Initialize bit writer\n\t\t\tbyteout = new Array();\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\n\t\t\t// Add JPEG headers\n\t\t\twriteWord(0xFFD8); // SOI\n\t\t\twriteAPP0();\n\t\t\twriteDQT();\n\t\t\twriteSOF0(image.width,image.height);\n\t\t\twriteDHT();\n\t\t\twriteSOS();\n\n\t\n\t\t\t// Encode 8x8 macroblocks\n\t\t\tvar DCY=0;\n\t\t\tvar DCU=0;\n\t\t\tvar DCV=0;\n\t\t\t\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\t\t\n\t\t\t\n\t\t\tthis.encode.displayName = \"_encode_\";\n\n\t\t\tvar imageData = image.data;\n\t\t\tvar width = image.width;\n\t\t\tvar height = image.height;\n\n\t\t\tvar quadWidth = width*4;\n\t\t\tvar tripleWidth = width*3;\n\t\t\t\n\t\t\tvar x, y = 0;\n\t\t\tvar r, g, b;\n\t\t\tvar start,p, col,row,pos;\n\t\t\twhile(y < height){\n\t\t\t\tx = 0;\n\t\t\t\twhile(x < quadWidth){\n\t\t\t\tstart = quadWidth * y + x;\n\t\t\t\tp = start;\n\t\t\t\tcol = -1;\n\t\t\t\trow = 0;\n\t\t\t\t\n\t\t\t\tfor(pos=0; pos < 64; pos++){\n\t\t\t\t\trow = pos >> 3;// /8\n\t\t\t\t\tcol = ( pos & 7 ) * 4; // %8\n\t\t\t\t\tp = start + ( row * quadWidth ) + col;\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(y+row >= height){ // padding bottom\n\t\t\t\t\t\tp-= (quadWidth*(y+1+row-height));\n\t\t\t\t\t}\n\n\t\t\t\t\tif(x+col >= quadWidth){ // padding right\t\n\t\t\t\t\t\tp-= ((x+col) - quadWidth +4)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tr = imageData[ p++ ];\n\t\t\t\t\tg = imageData[ p++ ];\n\t\t\t\t\tb = imageData[ p++ ];\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t/* // calculate YUV values dynamically\n\t\t\t\t\tYDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n\t\t\t\t\tUDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n\t\t\t\t\tVDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\t// use lookup table (slightly faster)\n\t\t\t\t\tYDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;\n\t\t\t\t\tUDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;\n\t\t\t\t\tVDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tDCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n\t\t\t\tDCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n\t\t\t\tDCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n\t\t\t\tx+=32;\n\t\t\t\t}\n\t\t\t\ty+=8;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t////////////////////////////////////////////////////////////////\n\t\n\t\t\t// Do the bit alignment of the EOI marker\n\t\t\tif ( bytepos >= 0 ) {\n\t\t\t\tvar fillbits = [];\n\t\t\t\tfillbits[1] = bytepos+1;\n\t\t\t\tfillbits[0] = (1<<(bytepos+1))-1;\n\t\t\t\twriteBits(fillbits);\n\t\t\t}\n\t\n\t\t\twriteWord(0xFFD9); //EOI\n\n      //return new Uint8Array(byteout);\n      return new Buffer(byteout);\n\n\t\t\tvar jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));\n\t\t\t\n\t\t\tbyteout = [];\n\t\t\t\n\t\t\t// benchmarking\n\t\t\tvar duration = new Date().getTime() - time_start;\n    \t\t//console.log('Encoding time: '+ duration + 'ms');\n    \t\t//\n\t\t\t\n\t\t\treturn jpegDataUri\t\t\t\n\t}\n\t\n\tfunction setQuality(quality){\n\t\tif (quality <= 0) {\n\t\t\tquality = 1;\n\t\t}\n\t\tif (quality > 100) {\n\t\t\tquality = 100;\n\t\t}\n\t\t\n\t\tif(currentQuality == quality) return // don't recalc if unchanged\n\t\t\n\t\tvar sf = 0;\n\t\tif (quality < 50) {\n\t\t\tsf = Math.floor(5000 / quality);\n\t\t} else {\n\t\t\tsf = Math.floor(200 - quality*2);\n\t\t}\n\t\t\n\t\tinitQuantTables(sf);\n\t\tcurrentQuality = quality;\n\t\t//console.log('Quality set to: '+quality +'%');\n\t}\n\t\n\tfunction init(){\n\t\tvar time_start = new Date().getTime();\n\t\tif(!quality) quality = 50;\n\t\t// Create tables\n\t\tinitCharLookupTable()\n\t\tinitHuffmanTbl();\n\t\tinitCategoryNumber();\n\t\tinitRGBYUVTable();\n\t\t\n\t\tsetQuality(quality);\n\t\tvar duration = new Date().getTime() - time_start;\n    \t//console.log('Initialization '+ duration + 'ms');\n\t}\n\t\n\tinit();\n\t\n};\nmodule.exports = encode;\n\nfunction encode(imgData, qu) {\n  if (typeof qu === 'undefined') qu = 50;\n  var encoder = new JPEGEncoder(qu);\n\tvar data = encoder.encode(imgData, qu);\n  return {\n    data: data,\n    width: imgData.width,\n    height: imgData.height\n  };\n}\n\n// helper function to get the imageData of an existing image on the current page.\nfunction getImageDataFromImage(idOrElement){\n\tvar theImg = (typeof(idOrElement)=='string')? document.getElementById(idOrElement):idOrElement;\n\tvar cvs = document.createElement('canvas');\n\tcvs.width = theImg.width;\n\tcvs.height = theImg.height;\n\tvar ctx = cvs.getContext(\"2d\");\n\tctx.drawImage(theImg,0,0);\n\t\n\treturn (ctx.getImageData(0, 0, cvs.width, cvs.height));\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n   Copyright 2011 notmasteryet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nvar JpegImage = (function jpegImage() {\n  \"use strict\";\n  var dctZigZag = new Int32Array([\n     0,\n     1,  8,\n    16,  9,  2,\n     3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n     5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13,  6,\n     7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1  =  4017   // cos(pi/16)\n  var dctSin1  =   799   // sin(pi/16)\n  var dctCos3  =  3406   // cos(3*pi/16)\n  var dctSin3  =  2276   // sin(3*pi/16)\n  var dctCos6  =  1567   // cos(6*pi/16)\n  var dctSin6  =  3784   // sin(6*pi/16)\n  var dctSqrt2 =  5793   // sqrt(2)\n  var dctSqrt1d2 = 2896  // sqrt(2) / 2\n\n  function constructor() {\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n      length--;\n    code.push({children: [], index: 0});\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push(q = {children: [], index: 0});\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push(q = {children: [], index: 0});\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function decodeScan(data, offset,\n                      frame, components, resetInterval,\n                      spectralStart, spectralEnd,\n                      successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData == 0xFF) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          throw new Error(\"unexpected marker: \" + ((bitsData << 8) | nextByte).toString(16));\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n      var node = tree, bit;\n      while ((bit = readBit()) !== null) {\n        node = node[bit];\n        if (typeof node === 'number')\n          return node;\n        if (typeof node !== 'object')\n          throw new Error(\"invalid huffman sequence\");\n      }\n      return null;\n    }\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        var bit = readBit();\n        if (bit === null) return;\n        n = (n << 1) | bit;\n        length--;\n      }\n      return n;\n    }\n    function receiveAndExtend(length) {\n      var n = receive(length);\n      if (n >= 1 << (length - 1))\n        return n;\n      return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      zz[0]= (component.pred += diff);\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15)\n            break;\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n    function decodeDCFirst(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n      zz[0] = (component.pred += diff);\n    }\n    function decodeDCSuccessive(component, zz) {\n      zz[0] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, zz) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart, e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, zz) {\n      var k = spectralStart, e = spectralEnd, r = 0;\n      while (k <= e) {\n        var z = dctZigZag[k];\n        var direction = zz[z] < 0 ? -1 : 1;\n        switch (successiveACState) {\n        case 0: // initial state\n          var rs = decodeHuffman(component.huffmanTableAC);\n          var s = rs & 15, r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1)\n              throw new Error(\"invalid ACn encoding\");\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue;\n        case 1: // skipping r zero items\n        case 2:\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            r--;\n            if (r === 0)\n              successiveACState = successiveACState == 2 ? 3 : 0;\n          }\n          break;\n        case 3: // set value for a zero item\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            zz[z] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0)\n          successiveACState = 0;\n      }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      var blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n    function decodeBlock(component, decode, mcu) {\n      var blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0)\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      else\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) resetInterval = mcuExpected;\n\n    var h, v;\n    while (mcu < mcuExpected) {\n      // reset interval stuff\n      for (i = 0; i < componentsLength; i++)\n        components[i].pred = 0;\n      eobrun = 0;\n\n      if (componentsLength == 1) {\n        component = components[0];\n        for (n = 0; n < resetInterval; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < resetInterval; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n\n          // If we've reached our expected MCU's, stop decoding\n          if (mcu === mcuExpected) break;\n        }\n      }\n\n      // find marker\n      bitsCount = 0;\n      marker = (data[offset] << 8) | data[offset + 1];\n      if (marker < 0xFF00) {\n        throw new Error(\"marker was not found\");\n      }\n\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n        offset += 2;\n      }\n      else\n        break;\n    }\n\n    return offset - startOffset;\n  }\n\n  function buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var R = new Int32Array(64), r = new Uint8Array(64);\n\n    // A port of poppler's IDCT method which in turn is taken from:\n    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n    //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n    //   988-991.\n    function quantizeAndInverse(zz, dataOut, dataIn) {\n      var qt = component.quantizationTable;\n      var v0, v1, v2, v3, v4, v5, v6, v7, t;\n      var p = dataIn;\n      var i;\n\n      // dequant\n      for (i = 0; i < 64; i++)\n        p[i] = zz[i] * qt[i];\n\n      // inverse DCT on rows\n      for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n\n        // check for all-zero AC coefficients\n        if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 &&\n            p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 &&\n            p[7 + row] == 0) {\n          t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n          p[0 + row] = t;\n          p[1 + row] = t;\n          p[2 + row] = t;\n          p[3 + row] = t;\n          p[4 + row] = t;\n          p[5 + row] = t;\n          p[6 + row] = t;\n          p[7 + row] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n\n        // stage 3\n        t = (v0 - v1+ 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n      }\n\n      // inverse DCT on columns\n      for (i = 0; i < 8; ++i) {\n        var col = i;\n\n        // check for all-zero AC coefficients\n        if (p[1*8 + col] == 0 && p[2*8 + col] == 0 && p[3*8 + col] == 0 &&\n            p[4*8 + col] == 0 && p[5*8 + col] == 0 && p[6*8 + col] == 0 &&\n            p[7*8 + col] == 0) {\n          t = (dctSqrt2 * dataIn[i+0] + 8192) >> 14;\n          p[0*8 + col] = t;\n          p[1*8 + col] = t;\n          p[2*8 + col] = t;\n          p[3*8 + col] = t;\n          p[4*8 + col] = t;\n          p[5*8 + col] = t;\n          p[6*8 + col] = t;\n          p[7*8 + col] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0*8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4*8 + col] + 2048) >> 12;\n        v2 = p[2*8 + col];\n        v3 = p[6*8 + col];\n        v4 = (dctSqrt1d2 * (p[1*8 + col] - p[7*8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1*8 + col] + p[7*8 + col]) + 2048) >> 12;\n        v5 = p[3*8 + col];\n        v6 = p[5*8 + col];\n\n        // stage 3\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0*8 + col] = v0 + v7;\n        p[7*8 + col] = v0 - v7;\n        p[1*8 + col] = v1 + v6;\n        p[6*8 + col] = v1 - v6;\n        p[2*8 + col] = v2 + v5;\n        p[5*8 + col] = v2 - v5;\n        p[3*8 + col] = v3 + v4;\n        p[4*8 + col] = v3 - v4;\n      }\n\n      // convert to 8-bit integers\n      for (i = 0; i < 64; ++i) {\n        var sample = 128 + ((p[i] + 8) >> 4);\n        dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;\n      }\n    }\n\n    var i, j;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      var scanLine = blockRow << 3;\n      for (i = 0; i < 8; i++)\n        lines.push(new Uint8Array(samplesPerLine));\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n\n        var offset = 0, sample = blockCol << 3;\n        for (j = 0; j < 8; j++) {\n          var line = lines[scanLine + j];\n          for (i = 0; i < 8; i++)\n            line[sample + i] = r[offset++];\n        }\n      }\n    }\n    return lines;\n  }\n\n  function clampTo8bit(a) {\n    return a < 0 ? 0 : a > 255 ? 255 : a;\n  }\n\n  constructor.prototype = {\n    load: function load(path) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", path, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.onload = (function() {\n        // TODO catch parse error\n        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n        this.parse(data);\n        if (this.onload)\n          this.onload();\n      }).bind(this);\n      xhr.send(null);\n    },\n    parse: function parse(data) {\n      var offset = 0, length = data.length;\n      function readUint16() {\n        var value = (data[offset] << 8) | data[offset + 1];\n        offset += 2;\n        return value;\n      }\n      function readDataBlock() {\n        var length = readUint16();\n        var array = data.subarray(offset, offset + length - 2);\n        offset += array.length;\n        return array;\n      }\n      function prepareComponents(frame) {\n        var maxH = 0, maxV = 0;\n        var component, componentId;\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            if (maxH < component.h) maxH = component.h;\n            if (maxV < component.v) maxV = component.v;\n          }\n        }\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n            var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) * component.v / maxV);\n            var blocksPerLineForMcu = mcusPerLine * component.h;\n            var blocksPerColumnForMcu = mcusPerColumn * component.v;\n            var blocks = [];\n            for (var i = 0; i < blocksPerColumnForMcu; i++) {\n              var row = [];\n              for (var j = 0; j < blocksPerLineForMcu; j++)\n                row.push(new Int32Array(64));\n              blocks.push(row);\n            }\n            component.blocksPerLine = blocksPerLine;\n            component.blocksPerColumn = blocksPerColumn;\n            component.blocks = blocks;\n          }\n        }\n        frame.maxH = maxH;\n        frame.maxV = maxV;\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n      var jfif = null;\n      var adobe = null;\n      var pixels = null;\n      var frame, resetInterval;\n      var quantizationTables = [], frames = [];\n      var huffmanTablesAC = [], huffmanTablesDC = [];\n      var fileMarker = readUint16();\n      if (fileMarker != 0xFFD8) { // SOI (Start of Image)\n        throw new Error(\"SOI not found\");\n      }\n\n      fileMarker = readUint16();\n      while (fileMarker != 0xFFD9) { // EOI (End of image)\n        var i, j, l;\n        switch(fileMarker) {\n          case 0xFF00: break;\n          case 0xFFE0: // APP0 (Application Specific)\n          case 0xFFE1: // APP1\n          case 0xFFE2: // APP2\n          case 0xFFE3: // APP3\n          case 0xFFE4: // APP4\n          case 0xFFE5: // APP5\n          case 0xFFE6: // APP6\n          case 0xFFE7: // APP7\n          case 0xFFE8: // APP8\n          case 0xFFE9: // APP9\n          case 0xFFEA: // APP10\n          case 0xFFEB: // APP11\n          case 0xFFEC: // APP12\n          case 0xFFED: // APP13\n          case 0xFFEE: // APP14\n          case 0xFFEF: // APP15\n          case 0xFFFE: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xFFE0) {\n              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&\n                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n                jfif = {\n                  version: { major: appData[5], minor: appData[6] },\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xFFEE) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&\n                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n                adobe = {\n                  version: appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n            break;\n\n          case 0xFFDB: // DQT (Define Quantization Tables)\n            var quantizationTablesLength = readUint16();\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Int32Array(64);\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = readUint16();\n                }\n              } else\n                throw new Error(\"DQT: invalid table spec\");\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n            readUint16(); // skip data length\n            frame = {};\n            frame.extended = (fileMarker === 0xFFC1);\n            frame.progressive = (fileMarker === 0xFFC2);\n            frame.precision = data[offset++];\n            frame.scanLines = readUint16();\n            frame.samplesPerLine = readUint16();\n            frame.components = {};\n            frame.componentsOrder = [];\n            var componentsCount = data[offset++], componentId;\n            var maxH = 0, maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              var qId = data[offset + 2];\n              frame.componentsOrder.push(componentId);\n              frame.components[componentId] = {\n                h: h,\n                v: v,\n                quantizationIdx: qId\n              };\n              offset += 3;\n            }\n            prepareComponents(frame);\n            frames.push(frame);\n            break;\n\n          case 0xFFC4: // DHT (Define Huffman Tables)\n            var huffmanLength = readUint16();\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++)\n                codeLengthSum += (codeLengths[j] = data[offset]);\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++)\n                huffmanValues[j] = data[offset];\n              i += 17 + codeLengthSum;\n\n              ((huffmanTableSpec >> 4) === 0 ?\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xFFDD: // DRI (Define Restart Interval)\n            readUint16(); // skip data length\n            resetInterval = readUint16();\n            break;\n\n          case 0xFFDA: // SOS (Start of Scan)\n            var scanLength = readUint16();\n            var selectorsCount = data[offset++];\n            var components = [], component;\n            for (i = 0; i < selectorsCount; i++) {\n              component = frame.components[data[offset++]];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            var processed = decodeScan(data, offset,\n              frame, components, resetInterval,\n              spectralStart, spectralEnd,\n              successiveApproximation >> 4, successiveApproximation & 15);\n            offset += processed;\n            break;\n\n          case 0xFFFF: // Fill bytes\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n              offset--;\n            }\n            break;\n\n          default:\n            if (data[offset - 3] == 0xFF &&\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n              // could be incorrect encoding -- last 0xFF byte of the previous\n              // block was eaten by the encoder\n              offset -= 3;\n              break;\n            }\n            throw new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n        }\n        fileMarker = readUint16();\n      }\n      if (frames.length != 1)\n        throw new Error(\"only single frame JPEGs supported\");\n\n      // set each frame's components quantization table\n      for (var i = 0; i < frames.length; i++) {\n        var cp = frames[i].components;\n        for (var j in cp) {\n          cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];\n          delete cp[j].quantizationIdx;\n        }\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      for (var i = 0; i < frame.componentsOrder.length; i++) {\n        var component = frame.components[frame.componentsOrder[i]];\n        this.components.push({\n          lines: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV\n        });\n      }\n    },\n    getData: function getData(width, height) {\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component1, component2, component3, component4;\n      var component1Line, component2Line, component3Line, component4Line;\n      var x, y;\n      var offset = 0;\n      var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n      var colorTransform;\n      var dataLength = width * height * this.components.length;\n      var data = new Uint8Array(dataLength);\n      switch (this.components.length) {\n        case 1:\n          component1 = this.components[0];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 2:\n          // PDF might compress two component data in custom colorspace\n          component1 = this.components[0];\n          component2 = this.components[1];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n              data[offset++] = Y;\n              Y = component2Line[0 | (x * component2.scaleX * scaleX)];\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 3:\n          // The default transform for three components is true\n          colorTransform = true;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                R = component1Line[0 | (x * component1.scaleX * scaleX)];\n                G = component2Line[0 | (x * component2.scaleX * scaleX)];\n                B = component3Line[0 | (x * component3.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n\n                R = clampTo8bit(Y + 1.402 * (Cr - 128));\n                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                B = clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n\n              data[offset++] = R;\n              data[offset++] = G;\n              data[offset++] = B;\n            }\n          }\n          break;\n        case 4:\n          if (!this.adobe)\n            throw 'Unsupported color mode (4 components)';\n          // The default transform for four components is false\n          colorTransform = false;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          component4 = this.components[3];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            component4Line = component4.lines[0 | (y * component4.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                C = component1Line[0 | (x * component1.scaleX * scaleX)];\n                M = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Ye = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n\n                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));\n                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n              data[offset++] = 255-C;\n              data[offset++] = 255-M;\n              data[offset++] = 255-Ye;\n              data[offset++] = 255-K;\n            }\n          }\n          break;\n        default:\n          throw 'Unsupported color mode';\n      }\n      return data;\n    },\n    copyToImageData: function copyToImageData(imageData) {\n      var width = imageData.width, height = imageData.height;\n      var imageDataArray = imageData.data;\n      var data = this.getData(width, height);\n      var i = 0, j = 0, x, y;\n      var Y, K, C, M, R, G, B;\n      switch (this.components.length) {\n        case 1:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              Y = data[i++];\n\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        case 3:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              R = data[i++];\n              G = data[i++];\n              B = data[i++];\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        case 4:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              C = data[i++];\n              M = data[i++];\n              Y = data[i++];\n              K = data[i++];\n\n              R = 255 - clampTo8bit(C * (1 - K / 255) + K);\n              G = 255 - clampTo8bit(M * (1 - K / 255) + K);\n              B = 255 - clampTo8bit(Y * (1 - K / 255) + K);\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        default:\n          throw 'Unsupported color mode';\n      }\n    }\n  };\n\n  return constructor;\n})();\nmodule.exports = decode;\n\nfunction decode(jpegData, useTArray) {\n  var arr = new Uint8Array(jpegData);\n  var decoder = new JpegImage();\n  decoder.parse(arr);\n\n  var image = {\n    width: decoder.width,\n    height: decoder.height,\n    data: useTArray ?\n      new Uint8Array(decoder.width * decoder.height * 4) :\n      new Buffer(decoder.width * decoder.height * 4)\n  };\n\n  decoder.copyToImageData(image);\n\n  return image;\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0).Buffer))\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// 8ebc1eee25e934f217be.worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8ebc1eee25e934f217be","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/buffer/index.js\n// module id = 0\n// module chunks = 0","const resizeImage = require(\"../utils/ResizeImageData\");\r\nconst jpegjs = require(\"jpeg-js\");\r\n\r\nonmessage = (event) => {\r\n    this.width = event.data.width;\r\n    this.height = event.data.height;\r\n    this.quality = event.data.quality;\r\n    this.filesToUpload = event.data.files;\r\n    this.image = event.data.image;\r\n    //console.log(this.filesToUpload);\r\n    for (var i = 0; i < this.filesToUpload.length; i++) {\r\n        var file = this.filesToUpload[i];\r\n        ((infile) => {\r\n            var reader = new FileReader();\r\n            reader.onload = (e) => {\r\n                //console.log(e.target.result);\r\n                var rawImageData = jpegjs.decode(e.target.result);\r\n                //console.log(rawImageData);\r\n                var resizedRawImageData = resizeImage(rawImageData, this.width, this.height);\r\n                //console.log(resizedRawImageData);\r\n                var resizedImage = jpegjs.encode({\r\n                    data: resizedRawImageData.data,\r\n                    width: this.width,\r\n                    height: this.height\r\n                }, this.quality);\r\n                //console.log(resizedImage);\r\n                //var b64encoded = btoa(Uint8ToString(resizedImage.data));\r\n                var blobImage = new Blob([resizedImage.data], { type: \"Image/jpeg\" });\r\n                postMessage({ image: blobImage, filename:infile.name});\r\n            }\r\n            reader.readAsArrayBuffer(infile);\r\n        })(file);\r\n    }\r\n}\r\n\r\nUint8ToString = (byteArray) => {\r\n    var CHUNK_SZ = 0x8000;\r\n    var result = [];\r\n    for (var i = 0; i < byteArray.length; i += CHUNK_SZ) {\r\n        result.push(String.fromCharCode.apply(null, byteArray.subarray(i, i + CHUNK_SZ)));\r\n    }\r\n    return result.join(\"\");\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/workers/Resize.worker.js","'use strict'\r\n\r\nfunction nearestNeighbor (src, dst) {\r\n  let pos = 0\r\n\r\n  for (let y = 0; y < dst.height; y++) {\r\n    for (let x = 0; x < dst.width; x++) {\r\n      const srcX = Math.floor(x * src.width / dst.width)\r\n      const srcY = Math.floor(y * src.height / dst.height)\r\n\r\n      let srcPos = ((srcY * src.width) + srcX) * 4\r\n\r\n      dst.data[pos++] = src.data[srcPos++] // R\r\n      dst.data[pos++] = src.data[srcPos++] // G\r\n      dst.data[pos++] = src.data[srcPos++] // B\r\n      dst.data[pos++] = src.data[srcPos++] // A\r\n    }\r\n  }\r\n}\r\n\r\nfunction bilinearInterpolation (src, dst) {\r\n  function interpolate (k, kMin, kMax, vMin, vMax) {\r\n    return Math.round((k - kMin) * vMax + (kMax - k) * vMin)\r\n  }\r\n\r\n  function interpolateHorizontal (offset, x, y, xMin, xMax) {\r\n    const vMin = src.data[((y * src.width + xMin) * 4) + offset]\r\n    if (xMin === xMax) return vMin\r\n\r\n    const vMax = src.data[((y * src.width + xMax) * 4) + offset]\r\n    return interpolate(x, xMin, xMax, vMin, vMax)\r\n  }\r\n\r\n  function interpolateVertical (offset, x, xMin, xMax, y, yMin, yMax) {\r\n    const vMin = interpolateHorizontal(offset, x, yMin, xMin, xMax)\r\n    if (yMin === yMax) return vMin\r\n\r\n    const vMax = interpolateHorizontal(offset, x, yMax, xMin, xMax)\r\n    return interpolate(y, yMin, yMax, vMin, vMax)\r\n  }\r\n\r\n  let pos = 0\r\n\r\n  for (let y = 0; y < dst.height; y++) {\r\n    for (let x = 0; x < dst.width; x++) {\r\n      const srcX = x * src.width / dst.width\r\n      const srcY = y * src.height / dst.height\r\n\r\n      const xMin = Math.floor(srcX)\r\n      const yMin = Math.floor(srcY)\r\n\r\n      const xMax = Math.min(Math.ceil(srcX), src.width - 1)\r\n      const yMax = Math.min(Math.ceil(srcY), src.height - 1)\r\n\r\n      dst.data[pos++] = interpolateVertical(0, srcX, xMin, xMax, srcY, yMin, yMax) // R\r\n      dst.data[pos++] = interpolateVertical(1, srcX, xMin, xMax, srcY, yMin, yMax) // G\r\n      dst.data[pos++] = interpolateVertical(2, srcX, xMin, xMax, srcY, yMin, yMax) // B\r\n      dst.data[pos++] = interpolateVertical(3, srcX, xMin, xMax, srcY, yMin, yMax) // A\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = function resizeImageData (image, width, height, algorithm) {\r\n  algorithm = algorithm || 'biliniear-interp'\r\n\r\n  let resize\r\n  switch (algorithm) {\r\n    case 'nearest-neighbor': resize = nearestNeighbor; break\r\n    case 'biliniear-interp': resize = bilinearInterpolation; break\r\n    default: throw new Error(`Unknown algorithm: ${algorithm}`)\r\n  }\r\n\r\n  const data = Buffer.allocUnsafe(width * height * 4)\r\n  const result = { width, height, data }\r\n\r\n  resize(image, result)\r\n\r\n  return result\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/utils/ResizeImageData.js","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 3\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/base64-js/index.js\n// module id = 4\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ieee754/index.js\n// module id = 5\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/isarray/index.js\n// module id = 6\n// module chunks = 0","var encode = require('./lib/encoder'),\n    decode = require('./lib/decoder');\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jpeg-js/index.js\n// module id = 7\n// module chunks = 0","/*\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*\nJPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\n\nBasic GUI blocking jpeg encoder\n*/\n\nvar btoa = btoa || function(buf) {\n  return new Buffer(buf).toString('base64');\n};\n\nfunction JPEGEncoder(quality) {\n  var self = this;\n\tvar fround = Math.round;\n\tvar ffloor = Math.floor;\n\tvar YTable = new Array(64);\n\tvar UVTable = new Array(64);\n\tvar fdtbl_Y = new Array(64);\n\tvar fdtbl_UV = new Array(64);\n\tvar YDC_HT;\n\tvar UVDC_HT;\n\tvar YAC_HT;\n\tvar UVAC_HT;\n\t\n\tvar bitcode = new Array(65535);\n\tvar category = new Array(65535);\n\tvar outputfDCTQuant = new Array(64);\n\tvar DU = new Array(64);\n\tvar byteout = [];\n\tvar bytenew = 0;\n\tvar bytepos = 7;\n\t\n\tvar YDU = new Array(64);\n\tvar UDU = new Array(64);\n\tvar VDU = new Array(64);\n\tvar clt = new Array(256);\n\tvar RGB_YUV_TABLE = new Array(2048);\n\tvar currentQuality;\n\t\n\tvar ZigZag = [\n\t\t\t 0, 1, 5, 6,14,15,27,28,\n\t\t\t 2, 4, 7,13,16,26,29,42,\n\t\t\t 3, 8,12,17,25,30,41,43,\n\t\t\t 9,11,18,24,31,40,44,53,\n\t\t\t10,19,23,32,39,45,52,54,\n\t\t\t20,22,33,38,46,51,55,60,\n\t\t\t21,34,37,47,50,56,59,61,\n\t\t\t35,36,48,49,57,58,62,63\n\t\t];\n\t\n\tvar std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];\n\tvar std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];\n\tvar std_ac_luminance_values = [\n\t\t\t0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,\n\t\t\t0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,\n\t\t\t0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,\n\t\t\t0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,\n\t\t\t0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,\n\t\t\t0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,\n\t\t\t0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,\n\t\t\t0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,\n\t\t\t0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,\n\t\t\t0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,\n\t\t\t0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,\n\t\t\t0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,\n\t\t\t0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,\n\t\t\t0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,\n\t\t\t0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,\n\t\t\t0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,\n\t\t\t0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,\n\t\t\t0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,\n\t\t\t0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,\n\t\t\t0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tvar std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];\n\tvar std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];\n\tvar std_ac_chrominance_values = [\n\t\t\t0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,\n\t\t\t0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,\n\t\t\t0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,\n\t\t\t0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,\n\t\t\t0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,\n\t\t\t0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,\n\t\t\t0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,\n\t\t\t0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,\n\t\t\t0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,\n\t\t\t0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,\n\t\t\t0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,\n\t\t\t0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,\n\t\t\t0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,\n\t\t\t0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,\n\t\t\t0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,\n\t\t\t0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,\n\t\t\t0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,\n\t\t\t0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,\n\t\t\t0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,\n\t\t\t0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tfunction initQuantTables(sf){\n\t\t\tvar YQT = [\n\t\t\t\t16, 11, 10, 16, 24, 40, 51, 61,\n\t\t\t\t12, 12, 14, 19, 26, 58, 60, 55,\n\t\t\t\t14, 13, 16, 24, 40, 57, 69, 56,\n\t\t\t\t14, 17, 22, 29, 51, 87, 80, 62,\n\t\t\t\t18, 22, 37, 56, 68,109,103, 77,\n\t\t\t\t24, 35, 55, 64, 81,104,113, 92,\n\t\t\t\t49, 64, 78, 87,103,121,120,101,\n\t\t\t\t72, 92, 95, 98,112,100,103, 99\n\t\t\t];\n\t\t\t\n\t\t\tfor (var i = 0; i < 64; i++) {\n\t\t\t\tvar t = ffloor((YQT[i]*sf+50)/100);\n\t\t\t\tif (t < 1) {\n\t\t\t\t\tt = 1;\n\t\t\t\t} else if (t > 255) {\n\t\t\t\t\tt = 255;\n\t\t\t\t}\n\t\t\t\tYTable[ZigZag[i]] = t;\n\t\t\t}\n\t\t\tvar UVQT = [\n\t\t\t\t17, 18, 24, 47, 99, 99, 99, 99,\n\t\t\t\t18, 21, 26, 66, 99, 99, 99, 99,\n\t\t\t\t24, 26, 56, 99, 99, 99, 99, 99,\n\t\t\t\t47, 66, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99\n\t\t\t];\n\t\t\tfor (var j = 0; j < 64; j++) {\n\t\t\t\tvar u = ffloor((UVQT[j]*sf+50)/100);\n\t\t\t\tif (u < 1) {\n\t\t\t\t\tu = 1;\n\t\t\t\t} else if (u > 255) {\n\t\t\t\t\tu = 255;\n\t\t\t\t}\n\t\t\t\tUVTable[ZigZag[j]] = u;\n\t\t\t}\n\t\t\tvar aasf = [\n\t\t\t\t1.0, 1.387039845, 1.306562965, 1.175875602,\n\t\t\t\t1.0, 0.785694958, 0.541196100, 0.275899379\n\t\t\t];\n\t\t\tvar k = 0;\n\t\t\tfor (var row = 0; row < 8; row++)\n\t\t\t{\n\t\t\t\tfor (var col = 0; col < 8; col++)\n\t\t\t\t{\n\t\t\t\t\tfdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tfdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction computeHuffmanTbl(nrcodes, std_table){\n\t\t\tvar codevalue = 0;\n\t\t\tvar pos_in_table = 0;\n\t\t\tvar HT = new Array();\n\t\t\tfor (var k = 1; k <= 16; k++) {\n\t\t\t\tfor (var j = 1; j <= nrcodes[k]; j++) {\n\t\t\t\t\tHT[std_table[pos_in_table]] = [];\n\t\t\t\t\tHT[std_table[pos_in_table]][0] = codevalue;\n\t\t\t\t\tHT[std_table[pos_in_table]][1] = k;\n\t\t\t\t\tpos_in_table++;\n\t\t\t\t\tcodevalue++;\n\t\t\t\t}\n\t\t\t\tcodevalue*=2;\n\t\t\t}\n\t\t\treturn HT;\n\t\t}\n\t\t\n\t\tfunction initHuffmanTbl()\n\t\t{\n\t\t\tYDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);\n\t\t\tUVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);\n\t\t\tYAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);\n\t\t\tUVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);\n\t\t}\n\t\n\t\tfunction initCategoryNumber()\n\t\t{\n\t\t\tvar nrlower = 1;\n\t\t\tvar nrupper = 2;\n\t\t\tfor (var cat = 1; cat <= 15; cat++) {\n\t\t\t\t//Positive numbers\n\t\t\t\tfor (var nr = nrlower; nr<nrupper; nr++) {\n\t\t\t\t\tcategory[32767+nr] = cat;\n\t\t\t\t\tbitcode[32767+nr] = [];\n\t\t\t\t\tbitcode[32767+nr][1] = cat;\n\t\t\t\t\tbitcode[32767+nr][0] = nr;\n\t\t\t\t}\n\t\t\t\t//Negative numbers\n\t\t\t\tfor (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {\n\t\t\t\t\tcategory[32767+nrneg] = cat;\n\t\t\t\t\tbitcode[32767+nrneg] = [];\n\t\t\t\t\tbitcode[32767+nrneg][1] = cat;\n\t\t\t\t\tbitcode[32767+nrneg][0] = nrupper-1+nrneg;\n\t\t\t\t}\n\t\t\t\tnrlower <<= 1;\n\t\t\t\tnrupper <<= 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction initRGBYUVTable() {\n\t\t\tfor(var i = 0; i < 256;i++) {\n\t\t\t\tRGB_YUV_TABLE[i]      \t\t=  19595 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 256)>>0] \t=  38470 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 512)>>0] \t=   7471 * i + 0x8000;\n\t\t\t\tRGB_YUV_TABLE[(i+ 768)>>0] \t= -11059 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1024)>>0] \t= -21709 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1280)>>0] \t=  32768 * i + 0x807FFF;\n\t\t\t\tRGB_YUV_TABLE[(i+1536)>>0] \t= -27439 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1792)>>0] \t= - 5329 * i;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// IO functions\n\t\tfunction writeBits(bs)\n\t\t{\n\t\t\tvar value = bs[0];\n\t\t\tvar posval = bs[1]-1;\n\t\t\twhile ( posval >= 0 ) {\n\t\t\t\tif (value & (1 << posval) ) {\n\t\t\t\t\tbytenew |= (1 << bytepos);\n\t\t\t\t}\n\t\t\t\tposval--;\n\t\t\t\tbytepos--;\n\t\t\t\tif (bytepos < 0) {\n\t\t\t\t\tif (bytenew == 0xFF) {\n\t\t\t\t\t\twriteByte(0xFF);\n\t\t\t\t\t\twriteByte(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\twriteByte(bytenew);\n\t\t\t\t\t}\n\t\t\t\t\tbytepos=7;\n\t\t\t\t\tbytenew=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeByte(value)\n\t\t{\n\t\t\t//byteout.push(clt[value]); // write char directly instead of converting later\n      byteout.push(value);\n\t\t}\n\t\n\t\tfunction writeWord(value)\n\t\t{\n\t\t\twriteByte((value>>8)&0xFF);\n\t\t\twriteByte((value   )&0xFF);\n\t\t}\n\t\t\n\t\t// DCT & quantization core\n\t\tfunction fDCTQuant(data, fdtbl)\n\t\t{\n\t\t\tvar d0, d1, d2, d3, d4, d5, d6, d7;\n\t\t\t/* Pass 1: process rows. */\n\t\t\tvar dataOff=0;\n\t\t\tvar i;\n\t\t\tvar I8 = 8;\n\t\t\tvar I64 = 64;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff+1];\n\t\t\t\td2 = data[dataOff+2];\n\t\t\t\td3 = data[dataOff+3];\n\t\t\t\td4 = data[dataOff+4];\n\t\t\t\td5 = data[dataOff+5];\n\t\t\t\td6 = data[dataOff+6];\n\t\t\t\td7 = data[dataOff+7];\n\t\t\t\t\n\t\t\t\tvar tmp0 = d0 + d7;\n\t\t\t\tvar tmp7 = d0 - d7;\n\t\t\t\tvar tmp1 = d1 + d6;\n\t\t\t\tvar tmp6 = d1 - d6;\n\t\t\t\tvar tmp2 = d2 + d5;\n\t\t\t\tvar tmp5 = d2 - d5;\n\t\t\t\tvar tmp3 = d3 + d4;\n\t\t\t\tvar tmp4 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10 = tmp0 + tmp3;\t/* phase 2 */\n\t\t\t\tvar tmp13 = tmp0 - tmp3;\n\t\t\t\tvar tmp11 = tmp1 + tmp2;\n\t\t\t\tvar tmp12 = tmp1 - tmp2;\n\t\n\t\t\t\tdata[dataOff] = tmp10 + tmp11; /* phase 3 */\n\t\t\t\tdata[dataOff+4] = tmp10 - tmp11;\n\t\n\t\t\t\tvar z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+2] = tmp13 + z1; /* phase 5 */\n\t\t\t\tdata[dataOff+6] = tmp13 - z1;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10 = tmp4 + tmp5; /* phase 2 */\n\t\t\t\ttmp11 = tmp5 + tmp6;\n\t\t\t\ttmp12 = tmp6 + tmp7;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */\n\t\t\t\tvar z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */\n\t\t\t\tvar z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */\n\t\t\t\tvar z3 = tmp11 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11 = tmp7 + z3;\t/* phase 5 */\n\t\t\t\tvar z13 = tmp7 - z3;\n\t\n\t\t\t\tdata[dataOff+5] = z13 + z2;\t/* phase 6 */\n\t\t\t\tdata[dataOff+3] = z13 - z2;\n\t\t\t\tdata[dataOff+1] = z11 + z4;\n\t\t\t\tdata[dataOff+7] = z11 - z4;\n\t\n\t\t\t\tdataOff += 8; /* advance pointer to next row */\n\t\t\t}\n\t\n\t\t\t/* Pass 2: process columns. */\n\t\t\tdataOff = 0;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff + 8];\n\t\t\t\td2 = data[dataOff + 16];\n\t\t\t\td3 = data[dataOff + 24];\n\t\t\t\td4 = data[dataOff + 32];\n\t\t\t\td5 = data[dataOff + 40];\n\t\t\t\td6 = data[dataOff + 48];\n\t\t\t\td7 = data[dataOff + 56];\n\t\t\t\t\n\t\t\t\tvar tmp0p2 = d0 + d7;\n\t\t\t\tvar tmp7p2 = d0 - d7;\n\t\t\t\tvar tmp1p2 = d1 + d6;\n\t\t\t\tvar tmp6p2 = d1 - d6;\n\t\t\t\tvar tmp2p2 = d2 + d5;\n\t\t\t\tvar tmp5p2 = d2 - d5;\n\t\t\t\tvar tmp3p2 = d3 + d4;\n\t\t\t\tvar tmp4p2 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10p2 = tmp0p2 + tmp3p2;\t/* phase 2 */\n\t\t\t\tvar tmp13p2 = tmp0p2 - tmp3p2;\n\t\t\t\tvar tmp11p2 = tmp1p2 + tmp2p2;\n\t\t\t\tvar tmp12p2 = tmp1p2 - tmp2p2;\n\t\n\t\t\t\tdata[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */\n\t\t\t\tdata[dataOff+32] = tmp10p2 - tmp11p2;\n\t\n\t\t\t\tvar z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */\n\t\t\t\tdata[dataOff+48] = tmp13p2 - z1p2;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */\n\t\t\t\ttmp11p2 = tmp5p2 + tmp6p2;\n\t\t\t\ttmp12p2 = tmp6p2 + tmp7p2;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */\n\t\t\t\tvar z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */\n\t\t\t\tvar z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */\n\t\t\t\tvar z3p2 = tmp11p2 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11p2 = tmp7p2 + z3p2;\t/* phase 5 */\n\t\t\t\tvar z13p2 = tmp7p2 - z3p2;\n\t\n\t\t\t\tdata[dataOff+40] = z13p2 + z2p2; /* phase 6 */\n\t\t\t\tdata[dataOff+24] = z13p2 - z2p2;\n\t\t\t\tdata[dataOff+ 8] = z11p2 + z4p2;\n\t\t\t\tdata[dataOff+56] = z11p2 - z4p2;\n\t\n\t\t\t\tdataOff++; /* advance pointer to next column */\n\t\t\t}\n\t\n\t\t\t// Quantize/descale the coefficients\n\t\t\tvar fDCTQuant;\n\t\t\tfor (i=0; i<I64; ++i)\n\t\t\t{\n\t\t\t\t// Apply the quantization and scaling factor & Round to nearest integer\n\t\t\t\tfDCTQuant = data[i]*fdtbl[i];\n\t\t\t\toutputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);\n\t\t\t\t//outputfDCTQuant[i] = fround(fDCTQuant);\n\n\t\t\t}\n\t\t\treturn outputfDCTQuant;\n\t\t}\n\t\t\n\t\tfunction writeAPP0()\n\t\t{\n\t\t\twriteWord(0xFFE0); // marker\n\t\t\twriteWord(16); // length\n\t\t\twriteByte(0x4A); // J\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0x49); // I\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0); // = \"JFIF\",'\\0'\n\t\t\twriteByte(1); // versionhi\n\t\t\twriteByte(1); // versionlo\n\t\t\twriteByte(0); // xyunits\n\t\t\twriteWord(1); // xdensity\n\t\t\twriteWord(1); // ydensity\n\t\t\twriteByte(0); // thumbnwidth\n\t\t\twriteByte(0); // thumbnheight\n\t\t}\n\t\n\t\tfunction writeSOF0(width, height)\n\t\t{\n\t\t\twriteWord(0xFFC0); // marker\n\t\t\twriteWord(17);   // length, truecolor YUV JPG\n\t\t\twriteByte(8);    // precision\n\t\t\twriteWord(height);\n\t\t\twriteWord(width);\n\t\t\twriteByte(3);    // nrofcomponents\n\t\t\twriteByte(1);    // IdY\n\t\t\twriteByte(0x11); // HVY\n\t\t\twriteByte(0);    // QTY\n\t\t\twriteByte(2);    // IdU\n\t\t\twriteByte(0x11); // HVU\n\t\t\twriteByte(1);    // QTU\n\t\t\twriteByte(3);    // IdV\n\t\t\twriteByte(0x11); // HVV\n\t\t\twriteByte(1);    // QTV\n\t\t}\n\t\n\t\tfunction writeDQT()\n\t\t{\n\t\t\twriteWord(0xFFDB); // marker\n\t\t\twriteWord(132);\t   // length\n\t\t\twriteByte(0);\n\t\t\tfor (var i=0; i<64; i++) {\n\t\t\t\twriteByte(YTable[i]);\n\t\t\t}\n\t\t\twriteByte(1);\n\t\t\tfor (var j=0; j<64; j++) {\n\t\t\t\twriteByte(UVTable[j]);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeDHT()\n\t\t{\n\t\t\twriteWord(0xFFC4); // marker\n\t\t\twriteWord(0x01A2); // length\n\t\n\t\t\twriteByte(0); // HTYDCinfo\n\t\t\tfor (var i=0; i<16; i++) {\n\t\t\t\twriteByte(std_dc_luminance_nrcodes[i+1]);\n\t\t\t}\n\t\t\tfor (var j=0; j<=11; j++) {\n\t\t\t\twriteByte(std_dc_luminance_values[j]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x10); // HTYACinfo\n\t\t\tfor (var k=0; k<16; k++) {\n\t\t\t\twriteByte(std_ac_luminance_nrcodes[k+1]);\n\t\t\t}\n\t\t\tfor (var l=0; l<=161; l++) {\n\t\t\t\twriteByte(std_ac_luminance_values[l]);\n\t\t\t}\n\t\n\t\t\twriteByte(1); // HTUDCinfo\n\t\t\tfor (var m=0; m<16; m++) {\n\t\t\t\twriteByte(std_dc_chrominance_nrcodes[m+1]);\n\t\t\t}\n\t\t\tfor (var n=0; n<=11; n++) {\n\t\t\t\twriteByte(std_dc_chrominance_values[n]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x11); // HTUACinfo\n\t\t\tfor (var o=0; o<16; o++) {\n\t\t\t\twriteByte(std_ac_chrominance_nrcodes[o+1]);\n\t\t\t}\n\t\t\tfor (var p=0; p<=161; p++) {\n\t\t\t\twriteByte(std_ac_chrominance_values[p]);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeSOS()\n\t\t{\n\t\t\twriteWord(0xFFDA); // marker\n\t\t\twriteWord(12); // length\n\t\t\twriteByte(3); // nrofcomponents\n\t\t\twriteByte(1); // IdY\n\t\t\twriteByte(0); // HTY\n\t\t\twriteByte(2); // IdU\n\t\t\twriteByte(0x11); // HTU\n\t\t\twriteByte(3); // IdV\n\t\t\twriteByte(0x11); // HTV\n\t\t\twriteByte(0); // Ss\n\t\t\twriteByte(0x3f); // Se\n\t\t\twriteByte(0); // Bf\n\t\t}\n\t\t\n\t\tfunction processDU(CDU, fdtbl, DC, HTDC, HTAC){\n\t\t\tvar EOB = HTAC[0x00];\n\t\t\tvar M16zeroes = HTAC[0xF0];\n\t\t\tvar pos;\n\t\t\tvar I16 = 16;\n\t\t\tvar I63 = 63;\n\t\t\tvar I64 = 64;\n\t\t\tvar DU_DCT = fDCTQuant(CDU, fdtbl);\n\t\t\t//ZigZag reorder\n\t\t\tfor (var j=0;j<I64;++j) {\n\t\t\t\tDU[ZigZag[j]]=DU_DCT[j];\n\t\t\t}\n\t\t\tvar Diff = DU[0] - DC; DC = DU[0];\n\t\t\t//Encode DC\n\t\t\tif (Diff==0) {\n\t\t\t\twriteBits(HTDC[0]); // Diff might be 0\n\t\t\t} else {\n\t\t\t\tpos = 32767+Diff;\n\t\t\t\twriteBits(HTDC[category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t}\n\t\t\t//Encode ACs\n\t\t\tvar end0pos = 63; // was const... which is crazy\n\t\t\tfor (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};\n\t\t\t//end0pos = first element in reverse order !=0\n\t\t\tif ( end0pos == 0) {\n\t\t\t\twriteBits(EOB);\n\t\t\t\treturn DC;\n\t\t\t}\n\t\t\tvar i = 1;\n\t\t\tvar lng;\n\t\t\twhile ( i <= end0pos ) {\n\t\t\t\tvar startpos = i;\n\t\t\t\tfor (; (DU[i]==0) && (i<=end0pos); ++i) {}\n\t\t\t\tvar nrzeroes = i-startpos;\n\t\t\t\tif ( nrzeroes >= I16 ) {\n\t\t\t\t\tlng = nrzeroes>>4;\n\t\t\t\t\tfor (var nrmarker=1; nrmarker <= lng; ++nrmarker)\n\t\t\t\t\t\twriteBits(M16zeroes);\n\t\t\t\t\tnrzeroes = nrzeroes&0xF;\n\t\t\t\t}\n\t\t\t\tpos = 32767+DU[i];\n\t\t\t\twriteBits(HTAC[(nrzeroes<<4)+category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif ( end0pos != I63 ) {\n\t\t\t\twriteBits(EOB);\n\t\t\t}\n\t\t\treturn DC;\n\t\t}\n\n\t\tfunction initCharLookupTable(){\n\t\t\tvar sfcc = String.fromCharCode;\n\t\t\tfor(var i=0; i < 256; i++){ ///// ACHTUNG // 255\n\t\t\t\tclt[i] = sfcc(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.encode = function(image,quality) // image data object\n\t\t{\n\t\t\tvar time_start = new Date().getTime();\n\t\t\t\n\t\t\tif(quality) setQuality(quality);\n\t\t\t\n\t\t\t// Initialize bit writer\n\t\t\tbyteout = new Array();\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\n\t\t\t// Add JPEG headers\n\t\t\twriteWord(0xFFD8); // SOI\n\t\t\twriteAPP0();\n\t\t\twriteDQT();\n\t\t\twriteSOF0(image.width,image.height);\n\t\t\twriteDHT();\n\t\t\twriteSOS();\n\n\t\n\t\t\t// Encode 8x8 macroblocks\n\t\t\tvar DCY=0;\n\t\t\tvar DCU=0;\n\t\t\tvar DCV=0;\n\t\t\t\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\t\t\n\t\t\t\n\t\t\tthis.encode.displayName = \"_encode_\";\n\n\t\t\tvar imageData = image.data;\n\t\t\tvar width = image.width;\n\t\t\tvar height = image.height;\n\n\t\t\tvar quadWidth = width*4;\n\t\t\tvar tripleWidth = width*3;\n\t\t\t\n\t\t\tvar x, y = 0;\n\t\t\tvar r, g, b;\n\t\t\tvar start,p, col,row,pos;\n\t\t\twhile(y < height){\n\t\t\t\tx = 0;\n\t\t\t\twhile(x < quadWidth){\n\t\t\t\tstart = quadWidth * y + x;\n\t\t\t\tp = start;\n\t\t\t\tcol = -1;\n\t\t\t\trow = 0;\n\t\t\t\t\n\t\t\t\tfor(pos=0; pos < 64; pos++){\n\t\t\t\t\trow = pos >> 3;// /8\n\t\t\t\t\tcol = ( pos & 7 ) * 4; // %8\n\t\t\t\t\tp = start + ( row * quadWidth ) + col;\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(y+row >= height){ // padding bottom\n\t\t\t\t\t\tp-= (quadWidth*(y+1+row-height));\n\t\t\t\t\t}\n\n\t\t\t\t\tif(x+col >= quadWidth){ // padding right\t\n\t\t\t\t\t\tp-= ((x+col) - quadWidth +4)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tr = imageData[ p++ ];\n\t\t\t\t\tg = imageData[ p++ ];\n\t\t\t\t\tb = imageData[ p++ ];\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t/* // calculate YUV values dynamically\n\t\t\t\t\tYDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n\t\t\t\t\tUDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n\t\t\t\t\tVDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\t// use lookup table (slightly faster)\n\t\t\t\t\tYDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;\n\t\t\t\t\tUDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;\n\t\t\t\t\tVDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tDCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n\t\t\t\tDCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n\t\t\t\tDCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n\t\t\t\tx+=32;\n\t\t\t\t}\n\t\t\t\ty+=8;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t////////////////////////////////////////////////////////////////\n\t\n\t\t\t// Do the bit alignment of the EOI marker\n\t\t\tif ( bytepos >= 0 ) {\n\t\t\t\tvar fillbits = [];\n\t\t\t\tfillbits[1] = bytepos+1;\n\t\t\t\tfillbits[0] = (1<<(bytepos+1))-1;\n\t\t\t\twriteBits(fillbits);\n\t\t\t}\n\t\n\t\t\twriteWord(0xFFD9); //EOI\n\n      //return new Uint8Array(byteout);\n      return new Buffer(byteout);\n\n\t\t\tvar jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));\n\t\t\t\n\t\t\tbyteout = [];\n\t\t\t\n\t\t\t// benchmarking\n\t\t\tvar duration = new Date().getTime() - time_start;\n    \t\t//console.log('Encoding time: '+ duration + 'ms');\n    \t\t//\n\t\t\t\n\t\t\treturn jpegDataUri\t\t\t\n\t}\n\t\n\tfunction setQuality(quality){\n\t\tif (quality <= 0) {\n\t\t\tquality = 1;\n\t\t}\n\t\tif (quality > 100) {\n\t\t\tquality = 100;\n\t\t}\n\t\t\n\t\tif(currentQuality == quality) return // don't recalc if unchanged\n\t\t\n\t\tvar sf = 0;\n\t\tif (quality < 50) {\n\t\t\tsf = Math.floor(5000 / quality);\n\t\t} else {\n\t\t\tsf = Math.floor(200 - quality*2);\n\t\t}\n\t\t\n\t\tinitQuantTables(sf);\n\t\tcurrentQuality = quality;\n\t\t//console.log('Quality set to: '+quality +'%');\n\t}\n\t\n\tfunction init(){\n\t\tvar time_start = new Date().getTime();\n\t\tif(!quality) quality = 50;\n\t\t// Create tables\n\t\tinitCharLookupTable()\n\t\tinitHuffmanTbl();\n\t\tinitCategoryNumber();\n\t\tinitRGBYUVTable();\n\t\t\n\t\tsetQuality(quality);\n\t\tvar duration = new Date().getTime() - time_start;\n    \t//console.log('Initialization '+ duration + 'ms');\n\t}\n\t\n\tinit();\n\t\n};\nmodule.exports = encode;\n\nfunction encode(imgData, qu) {\n  if (typeof qu === 'undefined') qu = 50;\n  var encoder = new JPEGEncoder(qu);\n\tvar data = encoder.encode(imgData, qu);\n  return {\n    data: data,\n    width: imgData.width,\n    height: imgData.height\n  };\n}\n\n// helper function to get the imageData of an existing image on the current page.\nfunction getImageDataFromImage(idOrElement){\n\tvar theImg = (typeof(idOrElement)=='string')? document.getElementById(idOrElement):idOrElement;\n\tvar cvs = document.createElement('canvas');\n\tcvs.width = theImg.width;\n\tcvs.height = theImg.height;\n\tvar ctx = cvs.getContext(\"2d\");\n\tctx.drawImage(theImg,0,0);\n\t\n\treturn (ctx.getImageData(0, 0, cvs.width, cvs.height));\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jpeg-js/lib/encoder.js\n// module id = 8\n// module chunks = 0","/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n   Copyright 2011 notmasteryet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nvar JpegImage = (function jpegImage() {\n  \"use strict\";\n  var dctZigZag = new Int32Array([\n     0,\n     1,  8,\n    16,  9,  2,\n     3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n     5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13,  6,\n     7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1  =  4017   // cos(pi/16)\n  var dctSin1  =   799   // sin(pi/16)\n  var dctCos3  =  3406   // cos(3*pi/16)\n  var dctSin3  =  2276   // sin(3*pi/16)\n  var dctCos6  =  1567   // cos(6*pi/16)\n  var dctSin6  =  3784   // sin(6*pi/16)\n  var dctSqrt2 =  5793   // sqrt(2)\n  var dctSqrt1d2 = 2896  // sqrt(2) / 2\n\n  function constructor() {\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n      length--;\n    code.push({children: [], index: 0});\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push(q = {children: [], index: 0});\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push(q = {children: [], index: 0});\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function decodeScan(data, offset,\n                      frame, components, resetInterval,\n                      spectralStart, spectralEnd,\n                      successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData == 0xFF) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          throw new Error(\"unexpected marker: \" + ((bitsData << 8) | nextByte).toString(16));\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n      var node = tree, bit;\n      while ((bit = readBit()) !== null) {\n        node = node[bit];\n        if (typeof node === 'number')\n          return node;\n        if (typeof node !== 'object')\n          throw new Error(\"invalid huffman sequence\");\n      }\n      return null;\n    }\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        var bit = readBit();\n        if (bit === null) return;\n        n = (n << 1) | bit;\n        length--;\n      }\n      return n;\n    }\n    function receiveAndExtend(length) {\n      var n = receive(length);\n      if (n >= 1 << (length - 1))\n        return n;\n      return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      zz[0]= (component.pred += diff);\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15)\n            break;\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n    function decodeDCFirst(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n      zz[0] = (component.pred += diff);\n    }\n    function decodeDCSuccessive(component, zz) {\n      zz[0] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, zz) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart, e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, zz) {\n      var k = spectralStart, e = spectralEnd, r = 0;\n      while (k <= e) {\n        var z = dctZigZag[k];\n        var direction = zz[z] < 0 ? -1 : 1;\n        switch (successiveACState) {\n        case 0: // initial state\n          var rs = decodeHuffman(component.huffmanTableAC);\n          var s = rs & 15, r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1)\n              throw new Error(\"invalid ACn encoding\");\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue;\n        case 1: // skipping r zero items\n        case 2:\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            r--;\n            if (r === 0)\n              successiveACState = successiveACState == 2 ? 3 : 0;\n          }\n          break;\n        case 3: // set value for a zero item\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            zz[z] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0)\n          successiveACState = 0;\n      }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      var blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n    function decodeBlock(component, decode, mcu) {\n      var blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0)\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      else\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) resetInterval = mcuExpected;\n\n    var h, v;\n    while (mcu < mcuExpected) {\n      // reset interval stuff\n      for (i = 0; i < componentsLength; i++)\n        components[i].pred = 0;\n      eobrun = 0;\n\n      if (componentsLength == 1) {\n        component = components[0];\n        for (n = 0; n < resetInterval; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < resetInterval; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n\n          // If we've reached our expected MCU's, stop decoding\n          if (mcu === mcuExpected) break;\n        }\n      }\n\n      // find marker\n      bitsCount = 0;\n      marker = (data[offset] << 8) | data[offset + 1];\n      if (marker < 0xFF00) {\n        throw new Error(\"marker was not found\");\n      }\n\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n        offset += 2;\n      }\n      else\n        break;\n    }\n\n    return offset - startOffset;\n  }\n\n  function buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var R = new Int32Array(64), r = new Uint8Array(64);\n\n    // A port of poppler's IDCT method which in turn is taken from:\n    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n    //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n    //   988-991.\n    function quantizeAndInverse(zz, dataOut, dataIn) {\n      var qt = component.quantizationTable;\n      var v0, v1, v2, v3, v4, v5, v6, v7, t;\n      var p = dataIn;\n      var i;\n\n      // dequant\n      for (i = 0; i < 64; i++)\n        p[i] = zz[i] * qt[i];\n\n      // inverse DCT on rows\n      for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n\n        // check for all-zero AC coefficients\n        if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 &&\n            p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 &&\n            p[7 + row] == 0) {\n          t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n          p[0 + row] = t;\n          p[1 + row] = t;\n          p[2 + row] = t;\n          p[3 + row] = t;\n          p[4 + row] = t;\n          p[5 + row] = t;\n          p[6 + row] = t;\n          p[7 + row] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n\n        // stage 3\n        t = (v0 - v1+ 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n      }\n\n      // inverse DCT on columns\n      for (i = 0; i < 8; ++i) {\n        var col = i;\n\n        // check for all-zero AC coefficients\n        if (p[1*8 + col] == 0 && p[2*8 + col] == 0 && p[3*8 + col] == 0 &&\n            p[4*8 + col] == 0 && p[5*8 + col] == 0 && p[6*8 + col] == 0 &&\n            p[7*8 + col] == 0) {\n          t = (dctSqrt2 * dataIn[i+0] + 8192) >> 14;\n          p[0*8 + col] = t;\n          p[1*8 + col] = t;\n          p[2*8 + col] = t;\n          p[3*8 + col] = t;\n          p[4*8 + col] = t;\n          p[5*8 + col] = t;\n          p[6*8 + col] = t;\n          p[7*8 + col] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0*8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4*8 + col] + 2048) >> 12;\n        v2 = p[2*8 + col];\n        v3 = p[6*8 + col];\n        v4 = (dctSqrt1d2 * (p[1*8 + col] - p[7*8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1*8 + col] + p[7*8 + col]) + 2048) >> 12;\n        v5 = p[3*8 + col];\n        v6 = p[5*8 + col];\n\n        // stage 3\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0*8 + col] = v0 + v7;\n        p[7*8 + col] = v0 - v7;\n        p[1*8 + col] = v1 + v6;\n        p[6*8 + col] = v1 - v6;\n        p[2*8 + col] = v2 + v5;\n        p[5*8 + col] = v2 - v5;\n        p[3*8 + col] = v3 + v4;\n        p[4*8 + col] = v3 - v4;\n      }\n\n      // convert to 8-bit integers\n      for (i = 0; i < 64; ++i) {\n        var sample = 128 + ((p[i] + 8) >> 4);\n        dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;\n      }\n    }\n\n    var i, j;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      var scanLine = blockRow << 3;\n      for (i = 0; i < 8; i++)\n        lines.push(new Uint8Array(samplesPerLine));\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n\n        var offset = 0, sample = blockCol << 3;\n        for (j = 0; j < 8; j++) {\n          var line = lines[scanLine + j];\n          for (i = 0; i < 8; i++)\n            line[sample + i] = r[offset++];\n        }\n      }\n    }\n    return lines;\n  }\n\n  function clampTo8bit(a) {\n    return a < 0 ? 0 : a > 255 ? 255 : a;\n  }\n\n  constructor.prototype = {\n    load: function load(path) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", path, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.onload = (function() {\n        // TODO catch parse error\n        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n        this.parse(data);\n        if (this.onload)\n          this.onload();\n      }).bind(this);\n      xhr.send(null);\n    },\n    parse: function parse(data) {\n      var offset = 0, length = data.length;\n      function readUint16() {\n        var value = (data[offset] << 8) | data[offset + 1];\n        offset += 2;\n        return value;\n      }\n      function readDataBlock() {\n        var length = readUint16();\n        var array = data.subarray(offset, offset + length - 2);\n        offset += array.length;\n        return array;\n      }\n      function prepareComponents(frame) {\n        var maxH = 0, maxV = 0;\n        var component, componentId;\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            if (maxH < component.h) maxH = component.h;\n            if (maxV < component.v) maxV = component.v;\n          }\n        }\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n            var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) * component.v / maxV);\n            var blocksPerLineForMcu = mcusPerLine * component.h;\n            var blocksPerColumnForMcu = mcusPerColumn * component.v;\n            var blocks = [];\n            for (var i = 0; i < blocksPerColumnForMcu; i++) {\n              var row = [];\n              for (var j = 0; j < blocksPerLineForMcu; j++)\n                row.push(new Int32Array(64));\n              blocks.push(row);\n            }\n            component.blocksPerLine = blocksPerLine;\n            component.blocksPerColumn = blocksPerColumn;\n            component.blocks = blocks;\n          }\n        }\n        frame.maxH = maxH;\n        frame.maxV = maxV;\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n      var jfif = null;\n      var adobe = null;\n      var pixels = null;\n      var frame, resetInterval;\n      var quantizationTables = [], frames = [];\n      var huffmanTablesAC = [], huffmanTablesDC = [];\n      var fileMarker = readUint16();\n      if (fileMarker != 0xFFD8) { // SOI (Start of Image)\n        throw new Error(\"SOI not found\");\n      }\n\n      fileMarker = readUint16();\n      while (fileMarker != 0xFFD9) { // EOI (End of image)\n        var i, j, l;\n        switch(fileMarker) {\n          case 0xFF00: break;\n          case 0xFFE0: // APP0 (Application Specific)\n          case 0xFFE1: // APP1\n          case 0xFFE2: // APP2\n          case 0xFFE3: // APP3\n          case 0xFFE4: // APP4\n          case 0xFFE5: // APP5\n          case 0xFFE6: // APP6\n          case 0xFFE7: // APP7\n          case 0xFFE8: // APP8\n          case 0xFFE9: // APP9\n          case 0xFFEA: // APP10\n          case 0xFFEB: // APP11\n          case 0xFFEC: // APP12\n          case 0xFFED: // APP13\n          case 0xFFEE: // APP14\n          case 0xFFEF: // APP15\n          case 0xFFFE: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xFFE0) {\n              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&\n                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n                jfif = {\n                  version: { major: appData[5], minor: appData[6] },\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xFFEE) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&\n                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n                adobe = {\n                  version: appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n            break;\n\n          case 0xFFDB: // DQT (Define Quantization Tables)\n            var quantizationTablesLength = readUint16();\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Int32Array(64);\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = readUint16();\n                }\n              } else\n                throw new Error(\"DQT: invalid table spec\");\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n            readUint16(); // skip data length\n            frame = {};\n            frame.extended = (fileMarker === 0xFFC1);\n            frame.progressive = (fileMarker === 0xFFC2);\n            frame.precision = data[offset++];\n            frame.scanLines = readUint16();\n            frame.samplesPerLine = readUint16();\n            frame.components = {};\n            frame.componentsOrder = [];\n            var componentsCount = data[offset++], componentId;\n            var maxH = 0, maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              var qId = data[offset + 2];\n              frame.componentsOrder.push(componentId);\n              frame.components[componentId] = {\n                h: h,\n                v: v,\n                quantizationIdx: qId\n              };\n              offset += 3;\n            }\n            prepareComponents(frame);\n            frames.push(frame);\n            break;\n\n          case 0xFFC4: // DHT (Define Huffman Tables)\n            var huffmanLength = readUint16();\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++)\n                codeLengthSum += (codeLengths[j] = data[offset]);\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++)\n                huffmanValues[j] = data[offset];\n              i += 17 + codeLengthSum;\n\n              ((huffmanTableSpec >> 4) === 0 ?\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xFFDD: // DRI (Define Restart Interval)\n            readUint16(); // skip data length\n            resetInterval = readUint16();\n            break;\n\n          case 0xFFDA: // SOS (Start of Scan)\n            var scanLength = readUint16();\n            var selectorsCount = data[offset++];\n            var components = [], component;\n            for (i = 0; i < selectorsCount; i++) {\n              component = frame.components[data[offset++]];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            var processed = decodeScan(data, offset,\n              frame, components, resetInterval,\n              spectralStart, spectralEnd,\n              successiveApproximation >> 4, successiveApproximation & 15);\n            offset += processed;\n            break;\n\n          case 0xFFFF: // Fill bytes\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n              offset--;\n            }\n            break;\n\n          default:\n            if (data[offset - 3] == 0xFF &&\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n              // could be incorrect encoding -- last 0xFF byte of the previous\n              // block was eaten by the encoder\n              offset -= 3;\n              break;\n            }\n            throw new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n        }\n        fileMarker = readUint16();\n      }\n      if (frames.length != 1)\n        throw new Error(\"only single frame JPEGs supported\");\n\n      // set each frame's components quantization table\n      for (var i = 0; i < frames.length; i++) {\n        var cp = frames[i].components;\n        for (var j in cp) {\n          cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];\n          delete cp[j].quantizationIdx;\n        }\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      for (var i = 0; i < frame.componentsOrder.length; i++) {\n        var component = frame.components[frame.componentsOrder[i]];\n        this.components.push({\n          lines: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV\n        });\n      }\n    },\n    getData: function getData(width, height) {\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component1, component2, component3, component4;\n      var component1Line, component2Line, component3Line, component4Line;\n      var x, y;\n      var offset = 0;\n      var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n      var colorTransform;\n      var dataLength = width * height * this.components.length;\n      var data = new Uint8Array(dataLength);\n      switch (this.components.length) {\n        case 1:\n          component1 = this.components[0];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 2:\n          // PDF might compress two component data in custom colorspace\n          component1 = this.components[0];\n          component2 = this.components[1];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n              data[offset++] = Y;\n              Y = component2Line[0 | (x * component2.scaleX * scaleX)];\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 3:\n          // The default transform for three components is true\n          colorTransform = true;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                R = component1Line[0 | (x * component1.scaleX * scaleX)];\n                G = component2Line[0 | (x * component2.scaleX * scaleX)];\n                B = component3Line[0 | (x * component3.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n\n                R = clampTo8bit(Y + 1.402 * (Cr - 128));\n                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                B = clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n\n              data[offset++] = R;\n              data[offset++] = G;\n              data[offset++] = B;\n            }\n          }\n          break;\n        case 4:\n          if (!this.adobe)\n            throw 'Unsupported color mode (4 components)';\n          // The default transform for four components is false\n          colorTransform = false;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.colorTransform !== 'undefined')\n            colorTransform = !!this.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          component4 = this.components[3];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            component4Line = component4.lines[0 | (y * component4.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                C = component1Line[0 | (x * component1.scaleX * scaleX)];\n                M = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Ye = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n\n                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));\n                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n              data[offset++] = 255-C;\n              data[offset++] = 255-M;\n              data[offset++] = 255-Ye;\n              data[offset++] = 255-K;\n            }\n          }\n          break;\n        default:\n          throw 'Unsupported color mode';\n      }\n      return data;\n    },\n    copyToImageData: function copyToImageData(imageData) {\n      var width = imageData.width, height = imageData.height;\n      var imageDataArray = imageData.data;\n      var data = this.getData(width, height);\n      var i = 0, j = 0, x, y;\n      var Y, K, C, M, R, G, B;\n      switch (this.components.length) {\n        case 1:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              Y = data[i++];\n\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        case 3:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              R = data[i++];\n              G = data[i++];\n              B = data[i++];\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        case 4:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              C = data[i++];\n              M = data[i++];\n              Y = data[i++];\n              K = data[i++];\n\n              R = 255 - clampTo8bit(C * (1 - K / 255) + K);\n              G = 255 - clampTo8bit(M * (1 - K / 255) + K);\n              B = 255 - clampTo8bit(Y * (1 - K / 255) + K);\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              imageDataArray[j++] = 255;\n            }\n          }\n          break;\n        default:\n          throw 'Unsupported color mode';\n      }\n    }\n  };\n\n  return constructor;\n})();\nmodule.exports = decode;\n\nfunction decode(jpegData, useTArray) {\n  var arr = new Uint8Array(jpegData);\n  var decoder = new JpegImage();\n  decoder.parse(arr);\n\n  var image = {\n    width: decoder.width,\n    height: decoder.height,\n    data: useTArray ?\n      new Uint8Array(decoder.width * decoder.height * 4) :\n      new Buffer(decoder.width * decoder.height * 4)\n  };\n\n  decoder.copyToImageData(image);\n\n  return image;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jpeg-js/lib/decoder.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}